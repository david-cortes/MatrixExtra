// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// matmul_dense_csc_numeric
Rcpp::NumericMatrix matmul_dense_csc_numeric(Rcpp::NumericMatrix X_colmajor, Rcpp::IntegerVector Y_csc_indptr, Rcpp::IntegerVector Y_csc_indices, Rcpp::NumericVector Y_csc_values, int nthreads);
RcppExport SEXP _MatrixExtra_matmul_dense_csc_numeric(SEXP X_colmajorSEXP, SEXP Y_csc_indptrSEXP, SEXP Y_csc_indicesSEXP, SEXP Y_csc_valuesSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X_colmajor(X_colmajorSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Y_csc_indptr(Y_csc_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Y_csc_indices(Y_csc_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Y_csc_values(Y_csc_valuesSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(matmul_dense_csc_numeric(X_colmajor, Y_csc_indptr, Y_csc_indices, Y_csc_values, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// matmul_dense_csc_float32
Rcpp::IntegerMatrix matmul_dense_csc_float32(Rcpp::IntegerMatrix X_colmajor, Rcpp::IntegerVector Y_csc_indptr, Rcpp::IntegerVector Y_csc_indices, Rcpp::NumericVector Y_csc_values, int nthreads);
RcppExport SEXP _MatrixExtra_matmul_dense_csc_float32(SEXP X_colmajorSEXP, SEXP Y_csc_indptrSEXP, SEXP Y_csc_indicesSEXP, SEXP Y_csc_valuesSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type X_colmajor(X_colmajorSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Y_csc_indptr(Y_csc_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Y_csc_indices(Y_csc_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Y_csc_values(Y_csc_valuesSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(matmul_dense_csc_float32(X_colmajor, Y_csc_indptr, Y_csc_indices, Y_csc_values, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// tcrossprod_dense_csr_numeric
Rcpp::NumericMatrix tcrossprod_dense_csr_numeric(Rcpp::NumericMatrix X_colmajor, Rcpp::IntegerVector Y_csr_indptr, Rcpp::IntegerVector Y_csr_indices, Rcpp::NumericVector Y_csr_values, int nthreads, int ncols_Y);
RcppExport SEXP _MatrixExtra_tcrossprod_dense_csr_numeric(SEXP X_colmajorSEXP, SEXP Y_csr_indptrSEXP, SEXP Y_csr_indicesSEXP, SEXP Y_csr_valuesSEXP, SEXP nthreadsSEXP, SEXP ncols_YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X_colmajor(X_colmajorSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Y_csr_indptr(Y_csr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Y_csr_indices(Y_csr_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Y_csr_values(Y_csr_valuesSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< int >::type ncols_Y(ncols_YSEXP);
    rcpp_result_gen = Rcpp::wrap(tcrossprod_dense_csr_numeric(X_colmajor, Y_csr_indptr, Y_csr_indices, Y_csr_values, nthreads, ncols_Y));
    return rcpp_result_gen;
END_RCPP
}
// tcrossprod_dense_csr_float32
Rcpp::IntegerMatrix tcrossprod_dense_csr_float32(Rcpp::IntegerMatrix X_colmajor, Rcpp::IntegerVector Y_csr_indptr, Rcpp::IntegerVector Y_csr_indices, Rcpp::NumericVector Y_csr_values, int nthreads, int ncols_Y);
RcppExport SEXP _MatrixExtra_tcrossprod_dense_csr_float32(SEXP X_colmajorSEXP, SEXP Y_csr_indptrSEXP, SEXP Y_csr_indicesSEXP, SEXP Y_csr_valuesSEXP, SEXP nthreadsSEXP, SEXP ncols_YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type X_colmajor(X_colmajorSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Y_csr_indptr(Y_csr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Y_csr_indices(Y_csr_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Y_csr_values(Y_csr_valuesSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< int >::type ncols_Y(ncols_YSEXP);
    rcpp_result_gen = Rcpp::wrap(tcrossprod_dense_csr_float32(X_colmajor, Y_csr_indptr, Y_csr_indices, Y_csr_values, nthreads, ncols_Y));
    return rcpp_result_gen;
END_RCPP
}
// tcrossprod_csr_dense_numeric
Rcpp::NumericMatrix tcrossprod_csr_dense_numeric(Rcpp::IntegerVector X_csr_indptr, Rcpp::IntegerVector X_csr_indices, Rcpp::NumericVector X_csr_values, Rcpp::NumericMatrix Y_colmajor, int nthreads);
RcppExport SEXP _MatrixExtra_tcrossprod_csr_dense_numeric(SEXP X_csr_indptrSEXP, SEXP X_csr_indicesSEXP, SEXP X_csr_valuesSEXP, SEXP Y_colmajorSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indptr(X_csr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indices(X_csr_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X_csr_values(X_csr_valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Y_colmajor(Y_colmajorSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(tcrossprod_csr_dense_numeric(X_csr_indptr, X_csr_indices, X_csr_values, Y_colmajor, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// tcrossprod_csr_dense_float32
Rcpp::IntegerMatrix tcrossprod_csr_dense_float32(Rcpp::IntegerVector X_csr_indptr, Rcpp::IntegerVector X_csr_indices, Rcpp::NumericVector X_csr_values, Rcpp::IntegerMatrix Y_colmajor, int nthreads);
RcppExport SEXP _MatrixExtra_tcrossprod_csr_dense_float32(SEXP X_csr_indptrSEXP, SEXP X_csr_indicesSEXP, SEXP X_csr_valuesSEXP, SEXP Y_colmajorSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indptr(X_csr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indices(X_csr_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X_csr_values(X_csr_valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type Y_colmajor(Y_colmajorSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(tcrossprod_csr_dense_float32(X_csr_indptr, X_csr_indices, X_csr_values, Y_colmajor, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// matmul_csr_dvec_numeric
Rcpp::NumericVector matmul_csr_dvec_numeric(Rcpp::IntegerVector X_csr_indptr, Rcpp::IntegerVector X_csr_indices, Rcpp::NumericVector X_csr_values, Rcpp::NumericVector y_dense, int nthreads);
RcppExport SEXP _MatrixExtra_matmul_csr_dvec_numeric(SEXP X_csr_indptrSEXP, SEXP X_csr_indicesSEXP, SEXP X_csr_valuesSEXP, SEXP y_denseSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indptr(X_csr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indices(X_csr_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X_csr_values(X_csr_valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y_dense(y_denseSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(matmul_csr_dvec_numeric(X_csr_indptr, X_csr_indices, X_csr_values, y_dense, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// matmul_csr_dvec_integer
Rcpp::NumericVector matmul_csr_dvec_integer(Rcpp::IntegerVector X_csr_indptr, Rcpp::IntegerVector X_csr_indices, Rcpp::NumericVector X_csr_values, Rcpp::IntegerVector y_dense, int nthreads);
RcppExport SEXP _MatrixExtra_matmul_csr_dvec_integer(SEXP X_csr_indptrSEXP, SEXP X_csr_indicesSEXP, SEXP X_csr_valuesSEXP, SEXP y_denseSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indptr(X_csr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indices(X_csr_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X_csr_values(X_csr_valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type y_dense(y_denseSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(matmul_csr_dvec_integer(X_csr_indptr, X_csr_indices, X_csr_values, y_dense, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// matmul_csr_dvec_logical
Rcpp::NumericVector matmul_csr_dvec_logical(Rcpp::IntegerVector X_csr_indptr, Rcpp::IntegerVector X_csr_indices, Rcpp::NumericVector X_csr_values, Rcpp::LogicalVector y_dense, int nthreads);
RcppExport SEXP _MatrixExtra_matmul_csr_dvec_logical(SEXP X_csr_indptrSEXP, SEXP X_csr_indicesSEXP, SEXP X_csr_valuesSEXP, SEXP y_denseSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indptr(X_csr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indices(X_csr_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X_csr_values(X_csr_valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type y_dense(y_denseSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(matmul_csr_dvec_logical(X_csr_indptr, X_csr_indices, X_csr_values, y_dense, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// matmul_csr_dvec_float32
Rcpp::IntegerVector matmul_csr_dvec_float32(Rcpp::IntegerVector X_csr_indptr, Rcpp::IntegerVector X_csr_indices, Rcpp::NumericVector X_csr_values, Rcpp::IntegerVector y_dense, int nthreads);
RcppExport SEXP _MatrixExtra_matmul_csr_dvec_float32(SEXP X_csr_indptrSEXP, SEXP X_csr_indicesSEXP, SEXP X_csr_valuesSEXP, SEXP y_denseSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indptr(X_csr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indices(X_csr_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X_csr_values(X_csr_valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type y_dense(y_denseSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(matmul_csr_dvec_float32(X_csr_indptr, X_csr_indices, X_csr_values, y_dense, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// matmul_csr_svec_numeric
Rcpp::NumericVector matmul_csr_svec_numeric(Rcpp::IntegerVector X_csr_indptr, Rcpp::IntegerVector X_csr_indices, Rcpp::NumericVector X_csr_values, Rcpp::IntegerVector y_indices_base1, Rcpp::NumericVector y_values, int nthreads);
RcppExport SEXP _MatrixExtra_matmul_csr_svec_numeric(SEXP X_csr_indptrSEXP, SEXP X_csr_indicesSEXP, SEXP X_csr_valuesSEXP, SEXP y_indices_base1SEXP, SEXP y_valuesSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indptr(X_csr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indices(X_csr_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X_csr_values(X_csr_valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type y_indices_base1(y_indices_base1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y_values(y_valuesSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(matmul_csr_svec_numeric(X_csr_indptr, X_csr_indices, X_csr_values, y_indices_base1, y_values, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// matmul_csr_svec_integer
Rcpp::NumericVector matmul_csr_svec_integer(Rcpp::IntegerVector X_csr_indptr, Rcpp::IntegerVector X_csr_indices, Rcpp::NumericVector X_csr_values, Rcpp::IntegerVector y_indices_base1, Rcpp::IntegerVector y_values, int nthreads);
RcppExport SEXP _MatrixExtra_matmul_csr_svec_integer(SEXP X_csr_indptrSEXP, SEXP X_csr_indicesSEXP, SEXP X_csr_valuesSEXP, SEXP y_indices_base1SEXP, SEXP y_valuesSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indptr(X_csr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indices(X_csr_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X_csr_values(X_csr_valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type y_indices_base1(y_indices_base1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type y_values(y_valuesSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(matmul_csr_svec_integer(X_csr_indptr, X_csr_indices, X_csr_values, y_indices_base1, y_values, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// matmul_csr_svec_logical
Rcpp::NumericVector matmul_csr_svec_logical(Rcpp::IntegerVector X_csr_indptr, Rcpp::IntegerVector X_csr_indices, Rcpp::NumericVector X_csr_values, Rcpp::IntegerVector y_indices_base1, Rcpp::LogicalVector y_values, int nthreads);
RcppExport SEXP _MatrixExtra_matmul_csr_svec_logical(SEXP X_csr_indptrSEXP, SEXP X_csr_indicesSEXP, SEXP X_csr_valuesSEXP, SEXP y_indices_base1SEXP, SEXP y_valuesSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indptr(X_csr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indices(X_csr_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X_csr_values(X_csr_valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type y_indices_base1(y_indices_base1SEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type y_values(y_valuesSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(matmul_csr_svec_logical(X_csr_indptr, X_csr_indices, X_csr_values, y_indices_base1, y_values, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// matmul_csr_svec_binary
Rcpp::NumericVector matmul_csr_svec_binary(Rcpp::IntegerVector X_csr_indptr, Rcpp::IntegerVector X_csr_indices, Rcpp::NumericVector X_csr_values, Rcpp::IntegerVector y_indices_base1, int nthreads);
RcppExport SEXP _MatrixExtra_matmul_csr_svec_binary(SEXP X_csr_indptrSEXP, SEXP X_csr_indicesSEXP, SEXP X_csr_valuesSEXP, SEXP y_indices_base1SEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indptr(X_csr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indices(X_csr_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X_csr_values(X_csr_valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type y_indices_base1(y_indices_base1SEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(matmul_csr_svec_binary(X_csr_indptr, X_csr_indices, X_csr_values, y_indices_base1, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// matmul_csr_svec_float32
Rcpp::NumericVector matmul_csr_svec_float32(Rcpp::IntegerVector X_csr_indptr, Rcpp::IntegerVector X_csr_indices, Rcpp::NumericVector X_csr_values, Rcpp::IntegerVector y_indices_base1, Rcpp::IntegerVector y_values, int nthreads);
RcppExport SEXP _MatrixExtra_matmul_csr_svec_float32(SEXP X_csr_indptrSEXP, SEXP X_csr_indicesSEXP, SEXP X_csr_valuesSEXP, SEXP y_indices_base1SEXP, SEXP y_valuesSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indptr(X_csr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indices(X_csr_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X_csr_values(X_csr_valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type y_indices_base1(y_indices_base1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type y_values(y_valuesSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(matmul_csr_svec_float32(X_csr_indptr, X_csr_indices, X_csr_values, y_indices_base1, y_values, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// matmul_colvec_by_srowvecascsc
Rcpp::IntegerMatrix matmul_colvec_by_srowvecascsc(Rcpp::IntegerVector colvec_, Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices, Rcpp::NumericVector values);
RcppExport SEXP _MatrixExtra_matmul_colvec_by_srowvecascsc(SEXP colvec_SEXP, SEXP indptrSEXP, SEXP indicesSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type colvec_(colvec_SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(matmul_colvec_by_srowvecascsc(colvec_, indptr, indices, values));
    return rcpp_result_gen;
END_RCPP
}
// matmul_colvec_by_srowvecascsc_binary
Rcpp::IntegerMatrix matmul_colvec_by_srowvecascsc_binary(Rcpp::IntegerVector colvec_, Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices);
RcppExport SEXP _MatrixExtra_matmul_colvec_by_srowvecascsc_binary(SEXP colvec_SEXP, SEXP indptrSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type colvec_(colvec_SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(matmul_colvec_by_srowvecascsc_binary(colvec_, indptr, indices));
    return rcpp_result_gen;
END_RCPP
}
// matmul_rowvec_by_csc
Rcpp::IntegerMatrix matmul_rowvec_by_csc(Rcpp::IntegerVector rowvec_, Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices, Rcpp::NumericVector values);
RcppExport SEXP _MatrixExtra_matmul_rowvec_by_csc(SEXP rowvec_SEXP, SEXP indptrSEXP, SEXP indicesSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type rowvec_(rowvec_SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(matmul_rowvec_by_csc(rowvec_, indptr, indices, values));
    return rcpp_result_gen;
END_RCPP
}
// matmul_rowvec_by_cscbin
Rcpp::IntegerMatrix matmul_rowvec_by_cscbin(Rcpp::IntegerVector rowvec_, Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices);
RcppExport SEXP _MatrixExtra_matmul_rowvec_by_cscbin(SEXP rowvec_SEXP, SEXP indptrSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type rowvec_(rowvec_SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(matmul_rowvec_by_cscbin(rowvec_, indptr, indices));
    return rcpp_result_gen;
END_RCPP
}
// matmul_colvec_by_drowvecascsc
Rcpp::NumericVector matmul_colvec_by_drowvecascsc(Rcpp::NumericVector colvec_, Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices, Rcpp::NumericVector values_);
RcppExport SEXP _MatrixExtra_matmul_colvec_by_drowvecascsc(SEXP colvec_SEXP, SEXP indptrSEXP, SEXP indicesSEXP, SEXP values_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type colvec_(colvec_SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values_(values_SEXP);
    rcpp_result_gen = Rcpp::wrap(matmul_colvec_by_drowvecascsc(colvec_, indptr, indices, values_));
    return rcpp_result_gen;
END_RCPP
}
// matmul_colvec_by_scolvecascsr_f32
Rcpp::IntegerMatrix matmul_colvec_by_scolvecascsr_f32(Rcpp::IntegerVector colvec_, Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices, Rcpp::NumericVector values);
RcppExport SEXP _MatrixExtra_matmul_colvec_by_scolvecascsr_f32(SEXP colvec_SEXP, SEXP indptrSEXP, SEXP indicesSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type colvec_(colvec_SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(matmul_colvec_by_scolvecascsr_f32(colvec_, indptr, indices, values));
    return rcpp_result_gen;
END_RCPP
}
// matmul_colvec_by_scolvecascsr
Rcpp::NumericMatrix matmul_colvec_by_scolvecascsr(Rcpp::NumericVector colvec_, Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices, Rcpp::NumericVector values_);
RcppExport SEXP _MatrixExtra_matmul_colvec_by_scolvecascsr(SEXP colvec_SEXP, SEXP indptrSEXP, SEXP indicesSEXP, SEXP values_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type colvec_(colvec_SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values_(values_SEXP);
    rcpp_result_gen = Rcpp::wrap(matmul_colvec_by_scolvecascsr(colvec_, indptr, indices, values_));
    return rcpp_result_gen;
END_RCPP
}
// matmul_spcolvec_by_scolvecascsr_numeric
Rcpp::List matmul_spcolvec_by_scolvecascsr_numeric(Rcpp::IntegerVector X_csr_indptr, Rcpp::IntegerVector X_csr_indices, Rcpp::NumericVector X_csr_values, Rcpp::IntegerVector y_indices_base1, Rcpp::NumericVector y_values, int y_length);
RcppExport SEXP _MatrixExtra_matmul_spcolvec_by_scolvecascsr_numeric(SEXP X_csr_indptrSEXP, SEXP X_csr_indicesSEXP, SEXP X_csr_valuesSEXP, SEXP y_indices_base1SEXP, SEXP y_valuesSEXP, SEXP y_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indptr(X_csr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indices(X_csr_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X_csr_values(X_csr_valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type y_indices_base1(y_indices_base1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y_values(y_valuesSEXP);
    Rcpp::traits::input_parameter< int >::type y_length(y_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(matmul_spcolvec_by_scolvecascsr_numeric(X_csr_indptr, X_csr_indices, X_csr_values, y_indices_base1, y_values, y_length));
    return rcpp_result_gen;
END_RCPP
}
// matmul_spcolvec_by_scolvecascsr_integer
Rcpp::List matmul_spcolvec_by_scolvecascsr_integer(Rcpp::IntegerVector X_csr_indptr, Rcpp::IntegerVector X_csr_indices, Rcpp::NumericVector X_csr_values, Rcpp::IntegerVector y_indices_base1, Rcpp::IntegerVector y_values, int y_length);
RcppExport SEXP _MatrixExtra_matmul_spcolvec_by_scolvecascsr_integer(SEXP X_csr_indptrSEXP, SEXP X_csr_indicesSEXP, SEXP X_csr_valuesSEXP, SEXP y_indices_base1SEXP, SEXP y_valuesSEXP, SEXP y_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indptr(X_csr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indices(X_csr_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X_csr_values(X_csr_valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type y_indices_base1(y_indices_base1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type y_values(y_valuesSEXP);
    Rcpp::traits::input_parameter< int >::type y_length(y_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(matmul_spcolvec_by_scolvecascsr_integer(X_csr_indptr, X_csr_indices, X_csr_values, y_indices_base1, y_values, y_length));
    return rcpp_result_gen;
END_RCPP
}
// matmul_spcolvec_by_scolvecascsr_logical
Rcpp::List matmul_spcolvec_by_scolvecascsr_logical(Rcpp::IntegerVector X_csr_indptr, Rcpp::IntegerVector X_csr_indices, Rcpp::NumericVector X_csr_values, Rcpp::IntegerVector y_indices_base1, Rcpp::LogicalVector y_values, int y_length);
RcppExport SEXP _MatrixExtra_matmul_spcolvec_by_scolvecascsr_logical(SEXP X_csr_indptrSEXP, SEXP X_csr_indicesSEXP, SEXP X_csr_valuesSEXP, SEXP y_indices_base1SEXP, SEXP y_valuesSEXP, SEXP y_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indptr(X_csr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indices(X_csr_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X_csr_values(X_csr_valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type y_indices_base1(y_indices_base1SEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type y_values(y_valuesSEXP);
    Rcpp::traits::input_parameter< int >::type y_length(y_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(matmul_spcolvec_by_scolvecascsr_logical(X_csr_indptr, X_csr_indices, X_csr_values, y_indices_base1, y_values, y_length));
    return rcpp_result_gen;
END_RCPP
}
// matmul_spcolvec_by_scolvecascsr_binary
Rcpp::List matmul_spcolvec_by_scolvecascsr_binary(Rcpp::IntegerVector X_csr_indptr, Rcpp::IntegerVector X_csr_indices, Rcpp::NumericVector X_csr_values, Rcpp::IntegerVector y_indices_base1, int y_length);
RcppExport SEXP _MatrixExtra_matmul_spcolvec_by_scolvecascsr_binary(SEXP X_csr_indptrSEXP, SEXP X_csr_indicesSEXP, SEXP X_csr_valuesSEXP, SEXP y_indices_base1SEXP, SEXP y_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indptr(X_csr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indices(X_csr_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X_csr_values(X_csr_valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type y_indices_base1(y_indices_base1SEXP);
    Rcpp::traits::input_parameter< int >::type y_length(y_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(matmul_spcolvec_by_scolvecascsr_binary(X_csr_indptr, X_csr_indices, X_csr_values, y_indices_base1, y_length));
    return rcpp_result_gen;
END_RCPP
}
// is_same_ngRMatrix
bool is_same_ngRMatrix(Rcpp::IntegerVector indptr1, Rcpp::IntegerVector indptr2, Rcpp::IntegerVector indices1, Rcpp::IntegerVector indices2);
RcppExport SEXP _MatrixExtra_is_same_ngRMatrix(SEXP indptr1SEXP, SEXP indptr2SEXP, SEXP indices1SEXP, SEXP indices2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr1(indptr1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr2(indptr2SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices1(indices1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices2(indices2SEXP);
    rcpp_result_gen = Rcpp::wrap(is_same_ngRMatrix(indptr1, indptr2, indices1, indices2));
    return rcpp_result_gen;
END_RCPP
}
// sort_sparse_indices_numeric
void sort_sparse_indices_numeric(Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices, Rcpp::NumericVector values);
RcppExport SEXP _MatrixExtra_sort_sparse_indices_numeric(SEXP indptrSEXP, SEXP indicesSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values(valuesSEXP);
    sort_sparse_indices_numeric(indptr, indices, values);
    return R_NilValue;
END_RCPP
}
// sort_sparse_indices_logical
void sort_sparse_indices_logical(Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices, Rcpp::LogicalVector values);
RcppExport SEXP _MatrixExtra_sort_sparse_indices_logical(SEXP indptrSEXP, SEXP indicesSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type values(valuesSEXP);
    sort_sparse_indices_logical(indptr, indices, values);
    return R_NilValue;
END_RCPP
}
// sort_sparse_indices_binary
void sort_sparse_indices_binary(Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices);
RcppExport SEXP _MatrixExtra_sort_sparse_indices_binary(SEXP indptrSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    sort_sparse_indices_binary(indptr, indices);
    return R_NilValue;
END_RCPP
}
// sort_coo_indices_numeric
void sort_coo_indices_numeric(Rcpp::IntegerVector indices1, Rcpp::IntegerVector indices2, Rcpp::NumericVector values);
RcppExport SEXP _MatrixExtra_sort_coo_indices_numeric(SEXP indices1SEXP, SEXP indices2SEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices1(indices1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices2(indices2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values(valuesSEXP);
    sort_coo_indices_numeric(indices1, indices2, values);
    return R_NilValue;
END_RCPP
}
// sort_coo_indices_logical
void sort_coo_indices_logical(Rcpp::IntegerVector indices1, Rcpp::IntegerVector indices2, Rcpp::LogicalVector values);
RcppExport SEXP _MatrixExtra_sort_coo_indices_logical(SEXP indices1SEXP, SEXP indices2SEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices1(indices1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices2(indices2SEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type values(valuesSEXP);
    sort_coo_indices_logical(indices1, indices2, values);
    return R_NilValue;
END_RCPP
}
// sort_coo_indices_binary
void sort_coo_indices_binary(Rcpp::IntegerVector indices1, Rcpp::IntegerVector indices2);
RcppExport SEXP _MatrixExtra_sort_coo_indices_binary(SEXP indices1SEXP, SEXP indices2SEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices1(indices1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices2(indices2SEXP);
    sort_coo_indices_binary(indices1, indices2);
    return R_NilValue;
END_RCPP
}
// sort_vector_indices_numeric
void sort_vector_indices_numeric(Rcpp::IntegerVector indices_base1, Rcpp::NumericVector values);
RcppExport SEXP _MatrixExtra_sort_vector_indices_numeric(SEXP indices_base1SEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices_base1(indices_base1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values(valuesSEXP);
    sort_vector_indices_numeric(indices_base1, values);
    return R_NilValue;
END_RCPP
}
// sort_vector_indices_integer
void sort_vector_indices_integer(Rcpp::IntegerVector indices_base1, Rcpp::IntegerVector values);
RcppExport SEXP _MatrixExtra_sort_vector_indices_integer(SEXP indices_base1SEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices_base1(indices_base1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type values(valuesSEXP);
    sort_vector_indices_integer(indices_base1, values);
    return R_NilValue;
END_RCPP
}
// sort_vector_indices_logical
void sort_vector_indices_logical(Rcpp::IntegerVector indices_base1, Rcpp::LogicalVector values);
RcppExport SEXP _MatrixExtra_sort_vector_indices_logical(SEXP indices_base1SEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices_base1(indices_base1SEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type values(valuesSEXP);
    sort_vector_indices_logical(indices_base1, values);
    return R_NilValue;
END_RCPP
}
// sort_vector_indices_binary
void sort_vector_indices_binary(Rcpp::IntegerVector indices_base1);
RcppExport SEXP _MatrixExtra_sort_vector_indices_binary(SEXP indices_base1SEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices_base1(indices_base1SEXP);
    sort_vector_indices_binary(indices_base1);
    return R_NilValue;
END_RCPP
}
// multiply_csr_elemwise
Rcpp::List multiply_csr_elemwise(Rcpp::IntegerVector indptr1, Rcpp::IntegerVector indptr2, Rcpp::IntegerVector indices1, Rcpp::IntegerVector indices2, Rcpp::NumericVector values1, Rcpp::NumericVector values2);
RcppExport SEXP _MatrixExtra_multiply_csr_elemwise(SEXP indptr1SEXP, SEXP indptr2SEXP, SEXP indices1SEXP, SEXP indices2SEXP, SEXP values1SEXP, SEXP values2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr1(indptr1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr2(indptr2SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices1(indices1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices2(indices2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values1(values1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values2(values2SEXP);
    rcpp_result_gen = Rcpp::wrap(multiply_csr_elemwise(indptr1, indptr2, indices1, indices2, values1, values2));
    return rcpp_result_gen;
END_RCPP
}
// multiply_csr_by_dense_elemwise_double
Rcpp::NumericVector multiply_csr_by_dense_elemwise_double(Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices, Rcpp::NumericVector values, Rcpp::NumericVector dense_mat);
RcppExport SEXP _MatrixExtra_multiply_csr_by_dense_elemwise_double(SEXP indptrSEXP, SEXP indicesSEXP, SEXP valuesSEXP, SEXP dense_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type dense_mat(dense_matSEXP);
    rcpp_result_gen = Rcpp::wrap(multiply_csr_by_dense_elemwise_double(indptr, indices, values, dense_mat));
    return rcpp_result_gen;
END_RCPP
}
// multiply_csr_by_dense_elemwise_int
Rcpp::NumericVector multiply_csr_by_dense_elemwise_int(Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices, Rcpp::NumericVector values, Rcpp::IntegerVector dense_mat);
RcppExport SEXP _MatrixExtra_multiply_csr_by_dense_elemwise_int(SEXP indptrSEXP, SEXP indicesSEXP, SEXP valuesSEXP, SEXP dense_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dense_mat(dense_matSEXP);
    rcpp_result_gen = Rcpp::wrap(multiply_csr_by_dense_elemwise_int(indptr, indices, values, dense_mat));
    return rcpp_result_gen;
END_RCPP
}
// multiply_csr_by_dense_elemwise_bool
Rcpp::NumericVector multiply_csr_by_dense_elemwise_bool(Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices, Rcpp::NumericVector values, Rcpp::LogicalVector dense_mat);
RcppExport SEXP _MatrixExtra_multiply_csr_by_dense_elemwise_bool(SEXP indptrSEXP, SEXP indicesSEXP, SEXP valuesSEXP, SEXP dense_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type dense_mat(dense_matSEXP);
    rcpp_result_gen = Rcpp::wrap(multiply_csr_by_dense_elemwise_bool(indptr, indices, values, dense_mat));
    return rcpp_result_gen;
END_RCPP
}
// add_csr_elemwise
Rcpp::List add_csr_elemwise(Rcpp::IntegerVector indptr1, Rcpp::IntegerVector indptr2, Rcpp::IntegerVector indices1, Rcpp::IntegerVector indices2, Rcpp::NumericVector values1, Rcpp::NumericVector values2, const bool substract);
RcppExport SEXP _MatrixExtra_add_csr_elemwise(SEXP indptr1SEXP, SEXP indptr2SEXP, SEXP indices1SEXP, SEXP indices2SEXP, SEXP values1SEXP, SEXP values2SEXP, SEXP substractSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr1(indptr1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr2(indptr2SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices1(indices1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices2(indices2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values1(values1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values2(values2SEXP);
    Rcpp::traits::input_parameter< const bool >::type substract(substractSEXP);
    rcpp_result_gen = Rcpp::wrap(add_csr_elemwise(indptr1, indptr2, indices1, indices2, values1, values2, substract));
    return rcpp_result_gen;
END_RCPP
}
// concat_indptr2
Rcpp::IntegerVector concat_indptr2(Rcpp::IntegerVector ptr1, Rcpp::IntegerVector ptr2);
RcppExport SEXP _MatrixExtra_concat_indptr2(SEXP ptr1SEXP, SEXP ptr2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type ptr1(ptr1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type ptr2(ptr2SEXP);
    rcpp_result_gen = Rcpp::wrap(concat_indptr2(ptr1, ptr2));
    return rcpp_result_gen;
END_RCPP
}
// concat_csr_batch
Rcpp::S4 concat_csr_batch(Rcpp::ListOf<Rcpp::S4> objects, Rcpp::S4 out);
RcppExport SEXP _MatrixExtra_concat_csr_batch(SEXP objectsSEXP, SEXP outSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::ListOf<Rcpp::S4> >::type objects(objectsSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type out(outSEXP);
    rcpp_result_gen = Rcpp::wrap(concat_csr_batch(objects, out));
    return rcpp_result_gen;
END_RCPP
}
// check_is_seq
bool check_is_seq(Rcpp::IntegerVector indices);
RcppExport SEXP _MatrixExtra_check_is_seq(SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(check_is_seq(indices));
    return rcpp_result_gen;
END_RCPP
}
// copy_csr_rows
Rcpp::List copy_csr_rows(Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices, Rcpp::NumericVector values, Rcpp::IntegerVector rows_take);
RcppExport SEXP _MatrixExtra_copy_csr_rows(SEXP indptrSEXP, SEXP indicesSEXP, SEXP valuesSEXP, SEXP rows_takeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type rows_take(rows_takeSEXP);
    rcpp_result_gen = Rcpp::wrap(copy_csr_rows(indptr, indices, values, rows_take));
    return rcpp_result_gen;
END_RCPP
}
// copy_csr_rows_col_seq
Rcpp::List copy_csr_rows_col_seq(Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices, Rcpp::NumericVector values, Rcpp::IntegerVector rows_take, Rcpp::IntegerVector cols_take);
RcppExport SEXP _MatrixExtra_copy_csr_rows_col_seq(SEXP indptrSEXP, SEXP indicesSEXP, SEXP valuesSEXP, SEXP rows_takeSEXP, SEXP cols_takeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type rows_take(rows_takeSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type cols_take(cols_takeSEXP);
    rcpp_result_gen = Rcpp::wrap(copy_csr_rows_col_seq(indptr, indices, values, rows_take, cols_take));
    return rcpp_result_gen;
END_RCPP
}
// copy_csr_arbitrary
Rcpp::List copy_csr_arbitrary(Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices, Rcpp::NumericVector values, Rcpp::IntegerVector rows_take, Rcpp::IntegerVector cols_take);
RcppExport SEXP _MatrixExtra_copy_csr_arbitrary(SEXP indptrSEXP, SEXP indicesSEXP, SEXP valuesSEXP, SEXP rows_takeSEXP, SEXP cols_takeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type rows_take(rows_takeSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type cols_take(cols_takeSEXP);
    rcpp_result_gen = Rcpp::wrap(copy_csr_arbitrary(indptr, indices, values, rows_take, cols_take));
    return rcpp_result_gen;
END_RCPP
}
// repeat_indices_n_times
Rcpp::IntegerVector repeat_indices_n_times(Rcpp::IntegerVector indices, Rcpp::IntegerVector remainder, int ix_length, int desired_length);
RcppExport SEXP _MatrixExtra_repeat_indices_n_times(SEXP indicesSEXP, SEXP remainderSEXP, SEXP ix_lengthSEXP, SEXP desired_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type remainder(remainderSEXP);
    Rcpp::traits::input_parameter< int >::type ix_length(ix_lengthSEXP);
    Rcpp::traits::input_parameter< int >::type desired_length(desired_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(repeat_indices_n_times(indices, remainder, ix_length, desired_length));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MatrixExtra_matmul_dense_csc_numeric", (DL_FUNC) &_MatrixExtra_matmul_dense_csc_numeric, 5},
    {"_MatrixExtra_matmul_dense_csc_float32", (DL_FUNC) &_MatrixExtra_matmul_dense_csc_float32, 5},
    {"_MatrixExtra_tcrossprod_dense_csr_numeric", (DL_FUNC) &_MatrixExtra_tcrossprod_dense_csr_numeric, 6},
    {"_MatrixExtra_tcrossprod_dense_csr_float32", (DL_FUNC) &_MatrixExtra_tcrossprod_dense_csr_float32, 6},
    {"_MatrixExtra_tcrossprod_csr_dense_numeric", (DL_FUNC) &_MatrixExtra_tcrossprod_csr_dense_numeric, 5},
    {"_MatrixExtra_tcrossprod_csr_dense_float32", (DL_FUNC) &_MatrixExtra_tcrossprod_csr_dense_float32, 5},
    {"_MatrixExtra_matmul_csr_dvec_numeric", (DL_FUNC) &_MatrixExtra_matmul_csr_dvec_numeric, 5},
    {"_MatrixExtra_matmul_csr_dvec_integer", (DL_FUNC) &_MatrixExtra_matmul_csr_dvec_integer, 5},
    {"_MatrixExtra_matmul_csr_dvec_logical", (DL_FUNC) &_MatrixExtra_matmul_csr_dvec_logical, 5},
    {"_MatrixExtra_matmul_csr_dvec_float32", (DL_FUNC) &_MatrixExtra_matmul_csr_dvec_float32, 5},
    {"_MatrixExtra_matmul_csr_svec_numeric", (DL_FUNC) &_MatrixExtra_matmul_csr_svec_numeric, 6},
    {"_MatrixExtra_matmul_csr_svec_integer", (DL_FUNC) &_MatrixExtra_matmul_csr_svec_integer, 6},
    {"_MatrixExtra_matmul_csr_svec_logical", (DL_FUNC) &_MatrixExtra_matmul_csr_svec_logical, 6},
    {"_MatrixExtra_matmul_csr_svec_binary", (DL_FUNC) &_MatrixExtra_matmul_csr_svec_binary, 5},
    {"_MatrixExtra_matmul_csr_svec_float32", (DL_FUNC) &_MatrixExtra_matmul_csr_svec_float32, 6},
    {"_MatrixExtra_matmul_colvec_by_srowvecascsc", (DL_FUNC) &_MatrixExtra_matmul_colvec_by_srowvecascsc, 4},
    {"_MatrixExtra_matmul_colvec_by_srowvecascsc_binary", (DL_FUNC) &_MatrixExtra_matmul_colvec_by_srowvecascsc_binary, 3},
    {"_MatrixExtra_matmul_rowvec_by_csc", (DL_FUNC) &_MatrixExtra_matmul_rowvec_by_csc, 4},
    {"_MatrixExtra_matmul_rowvec_by_cscbin", (DL_FUNC) &_MatrixExtra_matmul_rowvec_by_cscbin, 3},
    {"_MatrixExtra_matmul_colvec_by_drowvecascsc", (DL_FUNC) &_MatrixExtra_matmul_colvec_by_drowvecascsc, 4},
    {"_MatrixExtra_matmul_colvec_by_scolvecascsr_f32", (DL_FUNC) &_MatrixExtra_matmul_colvec_by_scolvecascsr_f32, 4},
    {"_MatrixExtra_matmul_colvec_by_scolvecascsr", (DL_FUNC) &_MatrixExtra_matmul_colvec_by_scolvecascsr, 4},
    {"_MatrixExtra_matmul_spcolvec_by_scolvecascsr_numeric", (DL_FUNC) &_MatrixExtra_matmul_spcolvec_by_scolvecascsr_numeric, 6},
    {"_MatrixExtra_matmul_spcolvec_by_scolvecascsr_integer", (DL_FUNC) &_MatrixExtra_matmul_spcolvec_by_scolvecascsr_integer, 6},
    {"_MatrixExtra_matmul_spcolvec_by_scolvecascsr_logical", (DL_FUNC) &_MatrixExtra_matmul_spcolvec_by_scolvecascsr_logical, 6},
    {"_MatrixExtra_matmul_spcolvec_by_scolvecascsr_binary", (DL_FUNC) &_MatrixExtra_matmul_spcolvec_by_scolvecascsr_binary, 5},
    {"_MatrixExtra_is_same_ngRMatrix", (DL_FUNC) &_MatrixExtra_is_same_ngRMatrix, 4},
    {"_MatrixExtra_sort_sparse_indices_numeric", (DL_FUNC) &_MatrixExtra_sort_sparse_indices_numeric, 3},
    {"_MatrixExtra_sort_sparse_indices_logical", (DL_FUNC) &_MatrixExtra_sort_sparse_indices_logical, 3},
    {"_MatrixExtra_sort_sparse_indices_binary", (DL_FUNC) &_MatrixExtra_sort_sparse_indices_binary, 2},
    {"_MatrixExtra_sort_coo_indices_numeric", (DL_FUNC) &_MatrixExtra_sort_coo_indices_numeric, 3},
    {"_MatrixExtra_sort_coo_indices_logical", (DL_FUNC) &_MatrixExtra_sort_coo_indices_logical, 3},
    {"_MatrixExtra_sort_coo_indices_binary", (DL_FUNC) &_MatrixExtra_sort_coo_indices_binary, 2},
    {"_MatrixExtra_sort_vector_indices_numeric", (DL_FUNC) &_MatrixExtra_sort_vector_indices_numeric, 2},
    {"_MatrixExtra_sort_vector_indices_integer", (DL_FUNC) &_MatrixExtra_sort_vector_indices_integer, 2},
    {"_MatrixExtra_sort_vector_indices_logical", (DL_FUNC) &_MatrixExtra_sort_vector_indices_logical, 2},
    {"_MatrixExtra_sort_vector_indices_binary", (DL_FUNC) &_MatrixExtra_sort_vector_indices_binary, 1},
    {"_MatrixExtra_multiply_csr_elemwise", (DL_FUNC) &_MatrixExtra_multiply_csr_elemwise, 6},
    {"_MatrixExtra_multiply_csr_by_dense_elemwise_double", (DL_FUNC) &_MatrixExtra_multiply_csr_by_dense_elemwise_double, 4},
    {"_MatrixExtra_multiply_csr_by_dense_elemwise_int", (DL_FUNC) &_MatrixExtra_multiply_csr_by_dense_elemwise_int, 4},
    {"_MatrixExtra_multiply_csr_by_dense_elemwise_bool", (DL_FUNC) &_MatrixExtra_multiply_csr_by_dense_elemwise_bool, 4},
    {"_MatrixExtra_add_csr_elemwise", (DL_FUNC) &_MatrixExtra_add_csr_elemwise, 7},
    {"_MatrixExtra_concat_indptr2", (DL_FUNC) &_MatrixExtra_concat_indptr2, 2},
    {"_MatrixExtra_concat_csr_batch", (DL_FUNC) &_MatrixExtra_concat_csr_batch, 2},
    {"_MatrixExtra_check_is_seq", (DL_FUNC) &_MatrixExtra_check_is_seq, 1},
    {"_MatrixExtra_copy_csr_rows", (DL_FUNC) &_MatrixExtra_copy_csr_rows, 4},
    {"_MatrixExtra_copy_csr_rows_col_seq", (DL_FUNC) &_MatrixExtra_copy_csr_rows_col_seq, 5},
    {"_MatrixExtra_copy_csr_arbitrary", (DL_FUNC) &_MatrixExtra_copy_csr_arbitrary, 5},
    {"_MatrixExtra_repeat_indices_n_times", (DL_FUNC) &_MatrixExtra_repeat_indices_n_times, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_MatrixExtra(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
