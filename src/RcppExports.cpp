// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// cbind_csr_numeric
Rcpp::List cbind_csr_numeric(Rcpp::IntegerVector X_csr_indptr, Rcpp::IntegerVector X_csr_indices, Rcpp::NumericVector X_csr_values, Rcpp::IntegerVector Y_csr_indptr, Rcpp::IntegerVector Y_csr_indices_plus_ncol, Rcpp::NumericVector Y_csr_values);
RcppExport SEXP _MatrixExtra_cbind_csr_numeric(SEXP X_csr_indptrSEXP, SEXP X_csr_indicesSEXP, SEXP X_csr_valuesSEXP, SEXP Y_csr_indptrSEXP, SEXP Y_csr_indices_plus_ncolSEXP, SEXP Y_csr_valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indptr(X_csr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indices(X_csr_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X_csr_values(X_csr_valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Y_csr_indptr(Y_csr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Y_csr_indices_plus_ncol(Y_csr_indices_plus_ncolSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Y_csr_values(Y_csr_valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(cbind_csr_numeric(X_csr_indptr, X_csr_indices, X_csr_values, Y_csr_indptr, Y_csr_indices_plus_ncol, Y_csr_values));
    return rcpp_result_gen;
END_RCPP
}
// cbind_csr_logical
Rcpp::List cbind_csr_logical(Rcpp::IntegerVector X_csr_indptr, Rcpp::IntegerVector X_csr_indices, Rcpp::LogicalVector X_csr_values, Rcpp::IntegerVector Y_csr_indptr, Rcpp::IntegerVector Y_csr_indices_plus_ncol, Rcpp::LogicalVector Y_csr_values);
RcppExport SEXP _MatrixExtra_cbind_csr_logical(SEXP X_csr_indptrSEXP, SEXP X_csr_indicesSEXP, SEXP X_csr_valuesSEXP, SEXP Y_csr_indptrSEXP, SEXP Y_csr_indices_plus_ncolSEXP, SEXP Y_csr_valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indptr(X_csr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indices(X_csr_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type X_csr_values(X_csr_valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Y_csr_indptr(Y_csr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Y_csr_indices_plus_ncol(Y_csr_indices_plus_ncolSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type Y_csr_values(Y_csr_valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(cbind_csr_logical(X_csr_indptr, X_csr_indices, X_csr_values, Y_csr_indptr, Y_csr_indices_plus_ncol, Y_csr_values));
    return rcpp_result_gen;
END_RCPP
}
// cbind_csr_binary
Rcpp::List cbind_csr_binary(Rcpp::IntegerVector X_csr_indptr, Rcpp::IntegerVector X_csr_indices, Rcpp::IntegerVector Y_csr_indptr, Rcpp::IntegerVector Y_csr_indices_plus_ncol);
RcppExport SEXP _MatrixExtra_cbind_csr_binary(SEXP X_csr_indptrSEXP, SEXP X_csr_indicesSEXP, SEXP Y_csr_indptrSEXP, SEXP Y_csr_indices_plus_ncolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indptr(X_csr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indices(X_csr_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Y_csr_indptr(Y_csr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Y_csr_indices_plus_ncol(Y_csr_indices_plus_ncolSEXP);
    rcpp_result_gen = Rcpp::wrap(cbind_csr_binary(X_csr_indptr, X_csr_indices, Y_csr_indptr, Y_csr_indices_plus_ncol));
    return rcpp_result_gen;
END_RCPP
}
// matmul_dense_csc_numeric
Rcpp::NumericMatrix matmul_dense_csc_numeric(Rcpp::NumericMatrix X_colmajor, Rcpp::IntegerVector Y_csc_indptr, Rcpp::IntegerVector Y_csc_indices, Rcpp::NumericVector Y_csc_values, int nthreads);
RcppExport SEXP _MatrixExtra_matmul_dense_csc_numeric(SEXP X_colmajorSEXP, SEXP Y_csc_indptrSEXP, SEXP Y_csc_indicesSEXP, SEXP Y_csc_valuesSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X_colmajor(X_colmajorSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Y_csc_indptr(Y_csc_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Y_csc_indices(Y_csc_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Y_csc_values(Y_csc_valuesSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(matmul_dense_csc_numeric(X_colmajor, Y_csc_indptr, Y_csc_indices, Y_csc_values, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// matmul_dense_csc_float32
Rcpp::IntegerMatrix matmul_dense_csc_float32(Rcpp::IntegerMatrix X_colmajor, Rcpp::IntegerVector Y_csc_indptr, Rcpp::IntegerVector Y_csc_indices, Rcpp::NumericVector Y_csc_values, int nthreads);
RcppExport SEXP _MatrixExtra_matmul_dense_csc_float32(SEXP X_colmajorSEXP, SEXP Y_csc_indptrSEXP, SEXP Y_csc_indicesSEXP, SEXP Y_csc_valuesSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type X_colmajor(X_colmajorSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Y_csc_indptr(Y_csc_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Y_csc_indices(Y_csc_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Y_csc_values(Y_csc_valuesSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(matmul_dense_csc_float32(X_colmajor, Y_csc_indptr, Y_csc_indices, Y_csc_values, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// tcrossprod_dense_csr_numeric
Rcpp::NumericMatrix tcrossprod_dense_csr_numeric(Rcpp::NumericMatrix X_colmajor, Rcpp::IntegerVector Y_csr_indptr, Rcpp::IntegerVector Y_csr_indices, Rcpp::NumericVector Y_csr_values, int nthreads, int ncols_Y);
RcppExport SEXP _MatrixExtra_tcrossprod_dense_csr_numeric(SEXP X_colmajorSEXP, SEXP Y_csr_indptrSEXP, SEXP Y_csr_indicesSEXP, SEXP Y_csr_valuesSEXP, SEXP nthreadsSEXP, SEXP ncols_YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X_colmajor(X_colmajorSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Y_csr_indptr(Y_csr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Y_csr_indices(Y_csr_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Y_csr_values(Y_csr_valuesSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< int >::type ncols_Y(ncols_YSEXP);
    rcpp_result_gen = Rcpp::wrap(tcrossprod_dense_csr_numeric(X_colmajor, Y_csr_indptr, Y_csr_indices, Y_csr_values, nthreads, ncols_Y));
    return rcpp_result_gen;
END_RCPP
}
// tcrossprod_dense_csr_float32
Rcpp::IntegerMatrix tcrossprod_dense_csr_float32(Rcpp::IntegerMatrix X_colmajor, Rcpp::IntegerVector Y_csr_indptr, Rcpp::IntegerVector Y_csr_indices, Rcpp::NumericVector Y_csr_values, int nthreads, int ncols_Y);
RcppExport SEXP _MatrixExtra_tcrossprod_dense_csr_float32(SEXP X_colmajorSEXP, SEXP Y_csr_indptrSEXP, SEXP Y_csr_indicesSEXP, SEXP Y_csr_valuesSEXP, SEXP nthreadsSEXP, SEXP ncols_YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type X_colmajor(X_colmajorSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Y_csr_indptr(Y_csr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Y_csr_indices(Y_csr_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Y_csr_values(Y_csr_valuesSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< int >::type ncols_Y(ncols_YSEXP);
    rcpp_result_gen = Rcpp::wrap(tcrossprod_dense_csr_float32(X_colmajor, Y_csr_indptr, Y_csr_indices, Y_csr_values, nthreads, ncols_Y));
    return rcpp_result_gen;
END_RCPP
}
// tcrossprod_csr_dense_numeric
Rcpp::NumericMatrix tcrossprod_csr_dense_numeric(Rcpp::IntegerVector X_csr_indptr, Rcpp::IntegerVector X_csr_indices, Rcpp::NumericVector X_csr_values, Rcpp::NumericMatrix Y_colmajor, int nthreads);
RcppExport SEXP _MatrixExtra_tcrossprod_csr_dense_numeric(SEXP X_csr_indptrSEXP, SEXP X_csr_indicesSEXP, SEXP X_csr_valuesSEXP, SEXP Y_colmajorSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indptr(X_csr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indices(X_csr_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X_csr_values(X_csr_valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Y_colmajor(Y_colmajorSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(tcrossprod_csr_dense_numeric(X_csr_indptr, X_csr_indices, X_csr_values, Y_colmajor, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// tcrossprod_csr_dense_float32
Rcpp::IntegerMatrix tcrossprod_csr_dense_float32(Rcpp::IntegerVector X_csr_indptr, Rcpp::IntegerVector X_csr_indices, Rcpp::NumericVector X_csr_values, Rcpp::IntegerMatrix Y_colmajor, int nthreads);
RcppExport SEXP _MatrixExtra_tcrossprod_csr_dense_float32(SEXP X_csr_indptrSEXP, SEXP X_csr_indicesSEXP, SEXP X_csr_valuesSEXP, SEXP Y_colmajorSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indptr(X_csr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indices(X_csr_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X_csr_values(X_csr_valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type Y_colmajor(Y_colmajorSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(tcrossprod_csr_dense_float32(X_csr_indptr, X_csr_indices, X_csr_values, Y_colmajor, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// matmul_csr_dvec_numeric
Rcpp::NumericVector matmul_csr_dvec_numeric(Rcpp::IntegerVector X_csr_indptr, Rcpp::IntegerVector X_csr_indices, Rcpp::NumericVector X_csr_values, Rcpp::NumericVector y_dense, int nthreads);
RcppExport SEXP _MatrixExtra_matmul_csr_dvec_numeric(SEXP X_csr_indptrSEXP, SEXP X_csr_indicesSEXP, SEXP X_csr_valuesSEXP, SEXP y_denseSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indptr(X_csr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indices(X_csr_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X_csr_values(X_csr_valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y_dense(y_denseSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(matmul_csr_dvec_numeric(X_csr_indptr, X_csr_indices, X_csr_values, y_dense, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// matmul_csr_dvec_integer
Rcpp::NumericVector matmul_csr_dvec_integer(Rcpp::IntegerVector X_csr_indptr, Rcpp::IntegerVector X_csr_indices, Rcpp::NumericVector X_csr_values, Rcpp::IntegerVector y_dense, int nthreads);
RcppExport SEXP _MatrixExtra_matmul_csr_dvec_integer(SEXP X_csr_indptrSEXP, SEXP X_csr_indicesSEXP, SEXP X_csr_valuesSEXP, SEXP y_denseSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indptr(X_csr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indices(X_csr_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X_csr_values(X_csr_valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type y_dense(y_denseSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(matmul_csr_dvec_integer(X_csr_indptr, X_csr_indices, X_csr_values, y_dense, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// matmul_csr_dvec_logical
Rcpp::NumericVector matmul_csr_dvec_logical(Rcpp::IntegerVector X_csr_indptr, Rcpp::IntegerVector X_csr_indices, Rcpp::NumericVector X_csr_values, Rcpp::LogicalVector y_dense, int nthreads);
RcppExport SEXP _MatrixExtra_matmul_csr_dvec_logical(SEXP X_csr_indptrSEXP, SEXP X_csr_indicesSEXP, SEXP X_csr_valuesSEXP, SEXP y_denseSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indptr(X_csr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indices(X_csr_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X_csr_values(X_csr_valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type y_dense(y_denseSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(matmul_csr_dvec_logical(X_csr_indptr, X_csr_indices, X_csr_values, y_dense, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// matmul_csr_dvec_float32
Rcpp::IntegerVector matmul_csr_dvec_float32(Rcpp::IntegerVector X_csr_indptr, Rcpp::IntegerVector X_csr_indices, Rcpp::NumericVector X_csr_values, Rcpp::IntegerVector y_dense, int nthreads);
RcppExport SEXP _MatrixExtra_matmul_csr_dvec_float32(SEXP X_csr_indptrSEXP, SEXP X_csr_indicesSEXP, SEXP X_csr_valuesSEXP, SEXP y_denseSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indptr(X_csr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indices(X_csr_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X_csr_values(X_csr_valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type y_dense(y_denseSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(matmul_csr_dvec_float32(X_csr_indptr, X_csr_indices, X_csr_values, y_dense, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// matmul_csr_svec_numeric
Rcpp::NumericVector matmul_csr_svec_numeric(Rcpp::IntegerVector X_csr_indptr, Rcpp::IntegerVector X_csr_indices, Rcpp::NumericVector X_csr_values, Rcpp::IntegerVector y_indices_base1, Rcpp::NumericVector y_values, int nthreads);
RcppExport SEXP _MatrixExtra_matmul_csr_svec_numeric(SEXP X_csr_indptrSEXP, SEXP X_csr_indicesSEXP, SEXP X_csr_valuesSEXP, SEXP y_indices_base1SEXP, SEXP y_valuesSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indptr(X_csr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indices(X_csr_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X_csr_values(X_csr_valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type y_indices_base1(y_indices_base1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y_values(y_valuesSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(matmul_csr_svec_numeric(X_csr_indptr, X_csr_indices, X_csr_values, y_indices_base1, y_values, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// matmul_csr_svec_integer
Rcpp::NumericVector matmul_csr_svec_integer(Rcpp::IntegerVector X_csr_indptr, Rcpp::IntegerVector X_csr_indices, Rcpp::NumericVector X_csr_values, Rcpp::IntegerVector y_indices_base1, Rcpp::IntegerVector y_values, int nthreads);
RcppExport SEXP _MatrixExtra_matmul_csr_svec_integer(SEXP X_csr_indptrSEXP, SEXP X_csr_indicesSEXP, SEXP X_csr_valuesSEXP, SEXP y_indices_base1SEXP, SEXP y_valuesSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indptr(X_csr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indices(X_csr_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X_csr_values(X_csr_valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type y_indices_base1(y_indices_base1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type y_values(y_valuesSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(matmul_csr_svec_integer(X_csr_indptr, X_csr_indices, X_csr_values, y_indices_base1, y_values, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// matmul_csr_svec_logical
Rcpp::NumericVector matmul_csr_svec_logical(Rcpp::IntegerVector X_csr_indptr, Rcpp::IntegerVector X_csr_indices, Rcpp::NumericVector X_csr_values, Rcpp::IntegerVector y_indices_base1, Rcpp::LogicalVector y_values, int nthreads);
RcppExport SEXP _MatrixExtra_matmul_csr_svec_logical(SEXP X_csr_indptrSEXP, SEXP X_csr_indicesSEXP, SEXP X_csr_valuesSEXP, SEXP y_indices_base1SEXP, SEXP y_valuesSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indptr(X_csr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indices(X_csr_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X_csr_values(X_csr_valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type y_indices_base1(y_indices_base1SEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type y_values(y_valuesSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(matmul_csr_svec_logical(X_csr_indptr, X_csr_indices, X_csr_values, y_indices_base1, y_values, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// matmul_csr_svec_binary
Rcpp::NumericVector matmul_csr_svec_binary(Rcpp::IntegerVector X_csr_indptr, Rcpp::IntegerVector X_csr_indices, Rcpp::NumericVector X_csr_values, Rcpp::IntegerVector y_indices_base1, int nthreads);
RcppExport SEXP _MatrixExtra_matmul_csr_svec_binary(SEXP X_csr_indptrSEXP, SEXP X_csr_indicesSEXP, SEXP X_csr_valuesSEXP, SEXP y_indices_base1SEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indptr(X_csr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indices(X_csr_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X_csr_values(X_csr_valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type y_indices_base1(y_indices_base1SEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(matmul_csr_svec_binary(X_csr_indptr, X_csr_indices, X_csr_values, y_indices_base1, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// matmul_csr_svec_float32
Rcpp::NumericVector matmul_csr_svec_float32(Rcpp::IntegerVector X_csr_indptr, Rcpp::IntegerVector X_csr_indices, Rcpp::NumericVector X_csr_values, Rcpp::IntegerVector y_indices_base1, Rcpp::IntegerVector y_values, int nthreads);
RcppExport SEXP _MatrixExtra_matmul_csr_svec_float32(SEXP X_csr_indptrSEXP, SEXP X_csr_indicesSEXP, SEXP X_csr_valuesSEXP, SEXP y_indices_base1SEXP, SEXP y_valuesSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indptr(X_csr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indices(X_csr_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X_csr_values(X_csr_valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type y_indices_base1(y_indices_base1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type y_values(y_valuesSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(matmul_csr_svec_float32(X_csr_indptr, X_csr_indices, X_csr_values, y_indices_base1, y_values, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// matmul_rowvec_by_csc
Rcpp::IntegerMatrix matmul_rowvec_by_csc(Rcpp::IntegerVector rowvec_, Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices, Rcpp::NumericVector values);
RcppExport SEXP _MatrixExtra_matmul_rowvec_by_csc(SEXP rowvec_SEXP, SEXP indptrSEXP, SEXP indicesSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type rowvec_(rowvec_SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(matmul_rowvec_by_csc(rowvec_, indptr, indices, values));
    return rcpp_result_gen;
END_RCPP
}
// matmul_rowvec_by_cscbin
Rcpp::IntegerMatrix matmul_rowvec_by_cscbin(Rcpp::IntegerVector rowvec_, Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices);
RcppExport SEXP _MatrixExtra_matmul_rowvec_by_cscbin(SEXP rowvec_SEXP, SEXP indptrSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type rowvec_(rowvec_SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(matmul_rowvec_by_cscbin(rowvec_, indptr, indices));
    return rcpp_result_gen;
END_RCPP
}
// matmul_colvec_by_scolvecascsr_f32
Rcpp::List matmul_colvec_by_scolvecascsr_f32(Rcpp::IntegerVector colvec_, Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices, Rcpp::NumericVector values_);
RcppExport SEXP _MatrixExtra_matmul_colvec_by_scolvecascsr_f32(SEXP colvec_SEXP, SEXP indptrSEXP, SEXP indicesSEXP, SEXP values_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type colvec_(colvec_SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values_(values_SEXP);
    rcpp_result_gen = Rcpp::wrap(matmul_colvec_by_scolvecascsr_f32(colvec_, indptr, indices, values_));
    return rcpp_result_gen;
END_RCPP
}
// matmul_colvec_by_scolvecascsr
Rcpp::List matmul_colvec_by_scolvecascsr(Rcpp::NumericVector colvec_, Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices, Rcpp::NumericVector values_);
RcppExport SEXP _MatrixExtra_matmul_colvec_by_scolvecascsr(SEXP colvec_SEXP, SEXP indptrSEXP, SEXP indicesSEXP, SEXP values_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type colvec_(colvec_SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values_(values_SEXP);
    rcpp_result_gen = Rcpp::wrap(matmul_colvec_by_scolvecascsr(colvec_, indptr, indices, values_));
    return rcpp_result_gen;
END_RCPP
}
// matmul_spcolvec_by_scolvecascsr_numeric
Rcpp::List matmul_spcolvec_by_scolvecascsr_numeric(Rcpp::IntegerVector X_csr_indptr, Rcpp::IntegerVector X_csr_indices, Rcpp::NumericVector X_csr_values, Rcpp::IntegerVector y_indices_base1, Rcpp::NumericVector y_values, int y_length);
RcppExport SEXP _MatrixExtra_matmul_spcolvec_by_scolvecascsr_numeric(SEXP X_csr_indptrSEXP, SEXP X_csr_indicesSEXP, SEXP X_csr_valuesSEXP, SEXP y_indices_base1SEXP, SEXP y_valuesSEXP, SEXP y_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indptr(X_csr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indices(X_csr_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X_csr_values(X_csr_valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type y_indices_base1(y_indices_base1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y_values(y_valuesSEXP);
    Rcpp::traits::input_parameter< int >::type y_length(y_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(matmul_spcolvec_by_scolvecascsr_numeric(X_csr_indptr, X_csr_indices, X_csr_values, y_indices_base1, y_values, y_length));
    return rcpp_result_gen;
END_RCPP
}
// matmul_spcolvec_by_scolvecascsr_integer
Rcpp::List matmul_spcolvec_by_scolvecascsr_integer(Rcpp::IntegerVector X_csr_indptr, Rcpp::IntegerVector X_csr_indices, Rcpp::NumericVector X_csr_values, Rcpp::IntegerVector y_indices_base1, Rcpp::IntegerVector y_values, int y_length);
RcppExport SEXP _MatrixExtra_matmul_spcolvec_by_scolvecascsr_integer(SEXP X_csr_indptrSEXP, SEXP X_csr_indicesSEXP, SEXP X_csr_valuesSEXP, SEXP y_indices_base1SEXP, SEXP y_valuesSEXP, SEXP y_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indptr(X_csr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indices(X_csr_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X_csr_values(X_csr_valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type y_indices_base1(y_indices_base1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type y_values(y_valuesSEXP);
    Rcpp::traits::input_parameter< int >::type y_length(y_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(matmul_spcolvec_by_scolvecascsr_integer(X_csr_indptr, X_csr_indices, X_csr_values, y_indices_base1, y_values, y_length));
    return rcpp_result_gen;
END_RCPP
}
// matmul_spcolvec_by_scolvecascsr_logical
Rcpp::List matmul_spcolvec_by_scolvecascsr_logical(Rcpp::IntegerVector X_csr_indptr, Rcpp::IntegerVector X_csr_indices, Rcpp::NumericVector X_csr_values, Rcpp::IntegerVector y_indices_base1, Rcpp::LogicalVector y_values, int y_length);
RcppExport SEXP _MatrixExtra_matmul_spcolvec_by_scolvecascsr_logical(SEXP X_csr_indptrSEXP, SEXP X_csr_indicesSEXP, SEXP X_csr_valuesSEXP, SEXP y_indices_base1SEXP, SEXP y_valuesSEXP, SEXP y_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indptr(X_csr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indices(X_csr_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X_csr_values(X_csr_valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type y_indices_base1(y_indices_base1SEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type y_values(y_valuesSEXP);
    Rcpp::traits::input_parameter< int >::type y_length(y_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(matmul_spcolvec_by_scolvecascsr_logical(X_csr_indptr, X_csr_indices, X_csr_values, y_indices_base1, y_values, y_length));
    return rcpp_result_gen;
END_RCPP
}
// matmul_spcolvec_by_scolvecascsr_binary
Rcpp::List matmul_spcolvec_by_scolvecascsr_binary(Rcpp::IntegerVector X_csr_indptr, Rcpp::IntegerVector X_csr_indices, Rcpp::NumericVector X_csr_values, Rcpp::IntegerVector y_indices_base1, int y_length);
RcppExport SEXP _MatrixExtra_matmul_spcolvec_by_scolvecascsr_binary(SEXP X_csr_indptrSEXP, SEXP X_csr_indicesSEXP, SEXP X_csr_valuesSEXP, SEXP y_indices_base1SEXP, SEXP y_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indptr(X_csr_indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indices(X_csr_indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X_csr_values(X_csr_valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type y_indices_base1(y_indices_base1SEXP);
    Rcpp::traits::input_parameter< int >::type y_length(y_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(matmul_spcolvec_by_scolvecascsr_binary(X_csr_indptr, X_csr_indices, X_csr_values, y_indices_base1, y_length));
    return rcpp_result_gen;
END_RCPP
}
// is_same_ngRMatrix
bool is_same_ngRMatrix(Rcpp::IntegerVector indptr1, Rcpp::IntegerVector indptr2, Rcpp::IntegerVector indices1, Rcpp::IntegerVector indices2);
RcppExport SEXP _MatrixExtra_is_same_ngRMatrix(SEXP indptr1SEXP, SEXP indptr2SEXP, SEXP indices1SEXP, SEXP indices2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr1(indptr1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr2(indptr2SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices1(indices1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices2(indices2SEXP);
    rcpp_result_gen = Rcpp::wrap(is_same_ngRMatrix(indptr1, indptr2, indices1, indices2));
    return rcpp_result_gen;
END_RCPP
}
// check_indices_are_unsorted
bool check_indices_are_unsorted(Rcpp::IntegerVector indptr, Rcpp::NumericVector indices);
RcppExport SEXP _MatrixExtra_check_indices_are_unsorted(SEXP indptrSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(check_indices_are_unsorted(indptr, indices));
    return rcpp_result_gen;
END_RCPP
}
// sort_sparse_indices_numeric
void sort_sparse_indices_numeric(Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices, Rcpp::NumericVector values);
RcppExport SEXP _MatrixExtra_sort_sparse_indices_numeric(SEXP indptrSEXP, SEXP indicesSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values(valuesSEXP);
    sort_sparse_indices_numeric(indptr, indices, values);
    return R_NilValue;
END_RCPP
}
// sort_sparse_indices_logical
void sort_sparse_indices_logical(Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices, Rcpp::LogicalVector values);
RcppExport SEXP _MatrixExtra_sort_sparse_indices_logical(SEXP indptrSEXP, SEXP indicesSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type values(valuesSEXP);
    sort_sparse_indices_logical(indptr, indices, values);
    return R_NilValue;
END_RCPP
}
// sort_sparse_indices_numeric_known_ncol
void sort_sparse_indices_numeric_known_ncol(Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices, Rcpp::NumericVector values, int ncol);
RcppExport SEXP _MatrixExtra_sort_sparse_indices_numeric_known_ncol(SEXP indptrSEXP, SEXP indicesSEXP, SEXP valuesSEXP, SEXP ncolSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    sort_sparse_indices_numeric_known_ncol(indptr, indices, values, ncol);
    return R_NilValue;
END_RCPP
}
// sort_sparse_indices_logical_known_ncol
void sort_sparse_indices_logical_known_ncol(Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices, Rcpp::LogicalVector values, int ncol);
RcppExport SEXP _MatrixExtra_sort_sparse_indices_logical_known_ncol(SEXP indptrSEXP, SEXP indicesSEXP, SEXP valuesSEXP, SEXP ncolSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    sort_sparse_indices_logical_known_ncol(indptr, indices, values, ncol);
    return R_NilValue;
END_RCPP
}
// sort_sparse_indices_binary
void sort_sparse_indices_binary(Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices);
RcppExport SEXP _MatrixExtra_sort_sparse_indices_binary(SEXP indptrSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    sort_sparse_indices_binary(indptr, indices);
    return R_NilValue;
END_RCPP
}
// sort_coo_indices_numeric
void sort_coo_indices_numeric(Rcpp::IntegerVector indices1, Rcpp::IntegerVector indices2, Rcpp::NumericVector values);
RcppExport SEXP _MatrixExtra_sort_coo_indices_numeric(SEXP indices1SEXP, SEXP indices2SEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices1(indices1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices2(indices2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values(valuesSEXP);
    sort_coo_indices_numeric(indices1, indices2, values);
    return R_NilValue;
END_RCPP
}
// sort_coo_indices_logical
void sort_coo_indices_logical(Rcpp::IntegerVector indices1, Rcpp::IntegerVector indices2, Rcpp::LogicalVector values);
RcppExport SEXP _MatrixExtra_sort_coo_indices_logical(SEXP indices1SEXP, SEXP indices2SEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices1(indices1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices2(indices2SEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type values(valuesSEXP);
    sort_coo_indices_logical(indices1, indices2, values);
    return R_NilValue;
END_RCPP
}
// sort_coo_indices_binary
void sort_coo_indices_binary(Rcpp::IntegerVector indices1, Rcpp::IntegerVector indices2);
RcppExport SEXP _MatrixExtra_sort_coo_indices_binary(SEXP indices1SEXP, SEXP indices2SEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices1(indices1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices2(indices2SEXP);
    sort_coo_indices_binary(indices1, indices2);
    return R_NilValue;
END_RCPP
}
// sort_vector_indices_numeric
void sort_vector_indices_numeric(Rcpp::IntegerVector indices_base1, Rcpp::NumericVector values);
RcppExport SEXP _MatrixExtra_sort_vector_indices_numeric(SEXP indices_base1SEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices_base1(indices_base1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values(valuesSEXP);
    sort_vector_indices_numeric(indices_base1, values);
    return R_NilValue;
END_RCPP
}
// sort_vector_indices_integer
void sort_vector_indices_integer(Rcpp::IntegerVector indices_base1, Rcpp::IntegerVector values);
RcppExport SEXP _MatrixExtra_sort_vector_indices_integer(SEXP indices_base1SEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices_base1(indices_base1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type values(valuesSEXP);
    sort_vector_indices_integer(indices_base1, values);
    return R_NilValue;
END_RCPP
}
// sort_vector_indices_logical
void sort_vector_indices_logical(Rcpp::IntegerVector indices_base1, Rcpp::LogicalVector values);
RcppExport SEXP _MatrixExtra_sort_vector_indices_logical(SEXP indices_base1SEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices_base1(indices_base1SEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type values(valuesSEXP);
    sort_vector_indices_logical(indices_base1, values);
    return R_NilValue;
END_RCPP
}
// sort_vector_indices_binary
void sort_vector_indices_binary(Rcpp::IntegerVector indices_base1);
RcppExport SEXP _MatrixExtra_sort_vector_indices_binary(SEXP indices_base1SEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices_base1(indices_base1SEXP);
    sort_vector_indices_binary(indices_base1);
    return R_NilValue;
END_RCPP
}
// deepcopy_num
Rcpp::NumericVector deepcopy_num(Rcpp::NumericVector x);
RcppExport SEXP _MatrixExtra_deepcopy_num(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(deepcopy_num(x));
    return rcpp_result_gen;
END_RCPP
}
// deepcopy_int
Rcpp::IntegerVector deepcopy_int(Rcpp::IntegerVector x);
RcppExport SEXP _MatrixExtra_deepcopy_int(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(deepcopy_int(x));
    return rcpp_result_gen;
END_RCPP
}
// deepcopy_log
Rcpp::LogicalVector deepcopy_log(Rcpp::LogicalVector x);
RcppExport SEXP _MatrixExtra_deepcopy_log(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(deepcopy_log(x));
    return rcpp_result_gen;
END_RCPP
}
// deepcopy_str
Rcpp::String deepcopy_str(Rcpp::String x);
RcppExport SEXP _MatrixExtra_deepcopy_str(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::String >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(deepcopy_str(x));
    return rcpp_result_gen;
END_RCPP
}
// multiply_csr_elemwise
Rcpp::List multiply_csr_elemwise(Rcpp::IntegerVector indptr1, Rcpp::IntegerVector indptr2, Rcpp::IntegerVector indices1, Rcpp::IntegerVector indices2, Rcpp::NumericVector values1, Rcpp::NumericVector values2);
RcppExport SEXP _MatrixExtra_multiply_csr_elemwise(SEXP indptr1SEXP, SEXP indptr2SEXP, SEXP indices1SEXP, SEXP indices2SEXP, SEXP values1SEXP, SEXP values2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr1(indptr1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr2(indptr2SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices1(indices1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices2(indices2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values1(values1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values2(values2SEXP);
    rcpp_result_gen = Rcpp::wrap(multiply_csr_elemwise(indptr1, indptr2, indices1, indices2, values1, values2));
    return rcpp_result_gen;
END_RCPP
}
// multiply_csr_by_dense_elemwise_double
Rcpp::NumericVector multiply_csr_by_dense_elemwise_double(Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices, Rcpp::NumericVector values, Rcpp::NumericVector dense_mat);
RcppExport SEXP _MatrixExtra_multiply_csr_by_dense_elemwise_double(SEXP indptrSEXP, SEXP indicesSEXP, SEXP valuesSEXP, SEXP dense_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type dense_mat(dense_matSEXP);
    rcpp_result_gen = Rcpp::wrap(multiply_csr_by_dense_elemwise_double(indptr, indices, values, dense_mat));
    return rcpp_result_gen;
END_RCPP
}
// multiply_csr_by_dense_elemwise_int
Rcpp::NumericVector multiply_csr_by_dense_elemwise_int(Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices, Rcpp::NumericVector values, Rcpp::IntegerVector dense_mat);
RcppExport SEXP _MatrixExtra_multiply_csr_by_dense_elemwise_int(SEXP indptrSEXP, SEXP indicesSEXP, SEXP valuesSEXP, SEXP dense_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dense_mat(dense_matSEXP);
    rcpp_result_gen = Rcpp::wrap(multiply_csr_by_dense_elemwise_int(indptr, indices, values, dense_mat));
    return rcpp_result_gen;
END_RCPP
}
// multiply_csr_by_dense_elemwise_bool
Rcpp::NumericVector multiply_csr_by_dense_elemwise_bool(Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices, Rcpp::NumericVector values, Rcpp::LogicalVector dense_mat);
RcppExport SEXP _MatrixExtra_multiply_csr_by_dense_elemwise_bool(SEXP indptrSEXP, SEXP indicesSEXP, SEXP valuesSEXP, SEXP dense_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type dense_mat(dense_matSEXP);
    rcpp_result_gen = Rcpp::wrap(multiply_csr_by_dense_elemwise_bool(indptr, indices, values, dense_mat));
    return rcpp_result_gen;
END_RCPP
}
// add_csr_elemwise
Rcpp::List add_csr_elemwise(Rcpp::IntegerVector indptr1, Rcpp::IntegerVector indptr2, Rcpp::IntegerVector indices1, Rcpp::IntegerVector indices2, Rcpp::NumericVector values1, Rcpp::NumericVector values2, const bool substract);
RcppExport SEXP _MatrixExtra_add_csr_elemwise(SEXP indptr1SEXP, SEXP indptr2SEXP, SEXP indices1SEXP, SEXP indices2SEXP, SEXP values1SEXP, SEXP values2SEXP, SEXP substractSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr1(indptr1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr2(indptr2SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices1(indices1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices2(indices2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values1(values1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values2(values2SEXP);
    Rcpp::traits::input_parameter< const bool >::type substract(substractSEXP);
    rcpp_result_gen = Rcpp::wrap(add_csr_elemwise(indptr1, indptr2, indices1, indices2, values1, values2, substract));
    return rcpp_result_gen;
END_RCPP
}
// multiply_csr_by_coo_elemwise
Rcpp::List multiply_csr_by_coo_elemwise(Rcpp::IntegerVector X_csr_indptr_, Rcpp::IntegerVector X_csr_indices_, Rcpp::NumericVector X_csr_values_, Rcpp::IntegerVector Y_coo_row, Rcpp::IntegerVector Y_coo_col, Rcpp::NumericVector Y_coo_val, int max_row_X, int max_col_X);
RcppExport SEXP _MatrixExtra_multiply_csr_by_coo_elemwise(SEXP X_csr_indptr_SEXP, SEXP X_csr_indices_SEXP, SEXP X_csr_values_SEXP, SEXP Y_coo_rowSEXP, SEXP Y_coo_colSEXP, SEXP Y_coo_valSEXP, SEXP max_row_XSEXP, SEXP max_col_XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indptr_(X_csr_indptr_SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type X_csr_indices_(X_csr_indices_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X_csr_values_(X_csr_values_SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Y_coo_row(Y_coo_rowSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Y_coo_col(Y_coo_colSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Y_coo_val(Y_coo_valSEXP);
    Rcpp::traits::input_parameter< int >::type max_row_X(max_row_XSEXP);
    Rcpp::traits::input_parameter< int >::type max_col_X(max_col_XSEXP);
    rcpp_result_gen = Rcpp::wrap(multiply_csr_by_coo_elemwise(X_csr_indptr_, X_csr_indices_, X_csr_values_, Y_coo_row, Y_coo_col, Y_coo_val, max_row_X, max_col_X));
    return rcpp_result_gen;
END_RCPP
}
// multiply_coo_by_dense_numeric
Rcpp::List multiply_coo_by_dense_numeric(Rcpp::NumericMatrix X_, Rcpp::IntegerVector Y_coo_row, Rcpp::IntegerVector Y_coo_col, Rcpp::NumericVector Y_coo_val);
RcppExport SEXP _MatrixExtra_multiply_coo_by_dense_numeric(SEXP X_SEXP, SEXP Y_coo_rowSEXP, SEXP Y_coo_colSEXP, SEXP Y_coo_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Y_coo_row(Y_coo_rowSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Y_coo_col(Y_coo_colSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Y_coo_val(Y_coo_valSEXP);
    rcpp_result_gen = Rcpp::wrap(multiply_coo_by_dense_numeric(X_, Y_coo_row, Y_coo_col, Y_coo_val));
    return rcpp_result_gen;
END_RCPP
}
// multiply_coo_by_dense_integer
Rcpp::List multiply_coo_by_dense_integer(Rcpp::IntegerMatrix X_, Rcpp::IntegerVector Y_coo_row, Rcpp::IntegerVector Y_coo_col, Rcpp::NumericVector Y_coo_val);
RcppExport SEXP _MatrixExtra_multiply_coo_by_dense_integer(SEXP X_SEXP, SEXP Y_coo_rowSEXP, SEXP Y_coo_colSEXP, SEXP Y_coo_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Y_coo_row(Y_coo_rowSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Y_coo_col(Y_coo_colSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Y_coo_val(Y_coo_valSEXP);
    rcpp_result_gen = Rcpp::wrap(multiply_coo_by_dense_integer(X_, Y_coo_row, Y_coo_col, Y_coo_val));
    return rcpp_result_gen;
END_RCPP
}
// multiply_coo_by_dense_logical
Rcpp::List multiply_coo_by_dense_logical(Rcpp::LogicalMatrix X_, Rcpp::IntegerVector Y_coo_row, Rcpp::IntegerVector Y_coo_col, Rcpp::NumericVector Y_coo_val);
RcppExport SEXP _MatrixExtra_multiply_coo_by_dense_logical(SEXP X_SEXP, SEXP Y_coo_rowSEXP, SEXP Y_coo_colSEXP, SEXP Y_coo_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::LogicalMatrix >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Y_coo_row(Y_coo_rowSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Y_coo_col(Y_coo_colSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Y_coo_val(Y_coo_valSEXP);
    rcpp_result_gen = Rcpp::wrap(multiply_coo_by_dense_logical(X_, Y_coo_row, Y_coo_col, Y_coo_val));
    return rcpp_result_gen;
END_RCPP
}
// multiply_coo_by_dense_float32
Rcpp::List multiply_coo_by_dense_float32(Rcpp::IntegerMatrix X_, Rcpp::IntegerVector Y_coo_row, Rcpp::IntegerVector Y_coo_col, Rcpp::NumericVector Y_coo_val);
RcppExport SEXP _MatrixExtra_multiply_coo_by_dense_float32(SEXP X_SEXP, SEXP Y_coo_rowSEXP, SEXP Y_coo_colSEXP, SEXP Y_coo_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Y_coo_row(Y_coo_rowSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Y_coo_col(Y_coo_colSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Y_coo_val(Y_coo_valSEXP);
    rcpp_result_gen = Rcpp::wrap(multiply_coo_by_dense_float32(X_, Y_coo_row, Y_coo_col, Y_coo_val));
    return rcpp_result_gen;
END_RCPP
}
// concat_indptr2
Rcpp::IntegerVector concat_indptr2(Rcpp::IntegerVector ptr1, Rcpp::IntegerVector ptr2);
RcppExport SEXP _MatrixExtra_concat_indptr2(SEXP ptr1SEXP, SEXP ptr2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type ptr1(ptr1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type ptr2(ptr2SEXP);
    rcpp_result_gen = Rcpp::wrap(concat_indptr2(ptr1, ptr2));
    return rcpp_result_gen;
END_RCPP
}
// concat_csr_batch
Rcpp::S4 concat_csr_batch(Rcpp::ListOf<Rcpp::S4> objects, Rcpp::S4 out);
RcppExport SEXP _MatrixExtra_concat_csr_batch(SEXP objectsSEXP, SEXP outSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::ListOf<Rcpp::S4> >::type objects(objectsSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type out(outSEXP);
    rcpp_result_gen = Rcpp::wrap(concat_csr_batch(objects, out));
    return rcpp_result_gen;
END_RCPP
}
// check_is_seq
bool check_is_seq(Rcpp::IntegerVector indices);
RcppExport SEXP _MatrixExtra_check_is_seq(SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(check_is_seq(indices));
    return rcpp_result_gen;
END_RCPP
}
// check_is_rev_seq
bool check_is_rev_seq(Rcpp::IntegerVector indices);
RcppExport SEXP _MatrixExtra_check_is_rev_seq(SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(check_is_rev_seq(indices));
    return rcpp_result_gen;
END_RCPP
}
// reverse_rows_numeric
Rcpp::List reverse_rows_numeric(Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices, Rcpp::NumericVector values);
RcppExport SEXP _MatrixExtra_reverse_rows_numeric(SEXP indptrSEXP, SEXP indicesSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(reverse_rows_numeric(indptr, indices, values));
    return rcpp_result_gen;
END_RCPP
}
// reverse_rows_logical
Rcpp::List reverse_rows_logical(Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices, Rcpp::LogicalVector values);
RcppExport SEXP _MatrixExtra_reverse_rows_logical(SEXP indptrSEXP, SEXP indicesSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(reverse_rows_logical(indptr, indices, values));
    return rcpp_result_gen;
END_RCPP
}
// reverse_rows_binary
Rcpp::List reverse_rows_binary(Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices);
RcppExport SEXP _MatrixExtra_reverse_rows_binary(SEXP indptrSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(reverse_rows_binary(indptr, indices));
    return rcpp_result_gen;
END_RCPP
}
// reverse_columns_inplace_numeric
void reverse_columns_inplace_numeric(Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices_, Rcpp::NumericVector values_, int ncol);
RcppExport SEXP _MatrixExtra_reverse_columns_inplace_numeric(SEXP indptrSEXP, SEXP indices_SEXP, SEXP values_SEXP, SEXP ncolSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices_(indices_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values_(values_SEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    reverse_columns_inplace_numeric(indptr, indices_, values_, ncol);
    return R_NilValue;
END_RCPP
}
// reverse_columns_inplace_logical
void reverse_columns_inplace_logical(Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices_, Rcpp::LogicalVector values_, int ncol);
RcppExport SEXP _MatrixExtra_reverse_columns_inplace_logical(SEXP indptrSEXP, SEXP indices_SEXP, SEXP values_SEXP, SEXP ncolSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices_(indices_SEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type values_(values_SEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    reverse_columns_inplace_logical(indptr, indices_, values_, ncol);
    return R_NilValue;
END_RCPP
}
// reverse_columns_inplace_binary
void reverse_columns_inplace_binary(Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices_, Rcpp::NumericVector values_, int ncol);
RcppExport SEXP _MatrixExtra_reverse_columns_inplace_binary(SEXP indptrSEXP, SEXP indices_SEXP, SEXP values_SEXP, SEXP ncolSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices_(indices_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values_(values_SEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    reverse_columns_inplace_binary(indptr, indices_, values_, ncol);
    return R_NilValue;
END_RCPP
}
// copy_csr_rows_numeric
Rcpp::List copy_csr_rows_numeric(Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices, Rcpp::NumericVector values, Rcpp::IntegerVector rows_take);
RcppExport SEXP _MatrixExtra_copy_csr_rows_numeric(SEXP indptrSEXP, SEXP indicesSEXP, SEXP valuesSEXP, SEXP rows_takeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type rows_take(rows_takeSEXP);
    rcpp_result_gen = Rcpp::wrap(copy_csr_rows_numeric(indptr, indices, values, rows_take));
    return rcpp_result_gen;
END_RCPP
}
// copy_csr_rows_logical
Rcpp::List copy_csr_rows_logical(Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices, Rcpp::LogicalVector values, Rcpp::IntegerVector rows_take);
RcppExport SEXP _MatrixExtra_copy_csr_rows_logical(SEXP indptrSEXP, SEXP indicesSEXP, SEXP valuesSEXP, SEXP rows_takeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type rows_take(rows_takeSEXP);
    rcpp_result_gen = Rcpp::wrap(copy_csr_rows_logical(indptr, indices, values, rows_take));
    return rcpp_result_gen;
END_RCPP
}
// copy_csr_rows_binary
Rcpp::List copy_csr_rows_binary(Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices, Rcpp::IntegerVector rows_take);
RcppExport SEXP _MatrixExtra_copy_csr_rows_binary(SEXP indptrSEXP, SEXP indicesSEXP, SEXP rows_takeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type rows_take(rows_takeSEXP);
    rcpp_result_gen = Rcpp::wrap(copy_csr_rows_binary(indptr, indices, rows_take));
    return rcpp_result_gen;
END_RCPP
}
// copy_csr_rows_col_seq_numeric
Rcpp::List copy_csr_rows_col_seq_numeric(Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices, Rcpp::NumericVector values, Rcpp::IntegerVector rows_take, Rcpp::IntegerVector cols_take, const bool index1);
RcppExport SEXP _MatrixExtra_copy_csr_rows_col_seq_numeric(SEXP indptrSEXP, SEXP indicesSEXP, SEXP valuesSEXP, SEXP rows_takeSEXP, SEXP cols_takeSEXP, SEXP index1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type rows_take(rows_takeSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type cols_take(cols_takeSEXP);
    Rcpp::traits::input_parameter< const bool >::type index1(index1SEXP);
    rcpp_result_gen = Rcpp::wrap(copy_csr_rows_col_seq_numeric(indptr, indices, values, rows_take, cols_take, index1));
    return rcpp_result_gen;
END_RCPP
}
// copy_csr_rows_col_seq_logical
Rcpp::List copy_csr_rows_col_seq_logical(Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices, Rcpp::LogicalVector values, Rcpp::IntegerVector rows_take, Rcpp::IntegerVector cols_take, const bool index1);
RcppExport SEXP _MatrixExtra_copy_csr_rows_col_seq_logical(SEXP indptrSEXP, SEXP indicesSEXP, SEXP valuesSEXP, SEXP rows_takeSEXP, SEXP cols_takeSEXP, SEXP index1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type rows_take(rows_takeSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type cols_take(cols_takeSEXP);
    Rcpp::traits::input_parameter< const bool >::type index1(index1SEXP);
    rcpp_result_gen = Rcpp::wrap(copy_csr_rows_col_seq_logical(indptr, indices, values, rows_take, cols_take, index1));
    return rcpp_result_gen;
END_RCPP
}
// copy_csr_rows_col_seq_binary
Rcpp::List copy_csr_rows_col_seq_binary(Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices, Rcpp::IntegerVector rows_take, Rcpp::IntegerVector cols_take, const bool index1);
RcppExport SEXP _MatrixExtra_copy_csr_rows_col_seq_binary(SEXP indptrSEXP, SEXP indicesSEXP, SEXP rows_takeSEXP, SEXP cols_takeSEXP, SEXP index1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type rows_take(rows_takeSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type cols_take(cols_takeSEXP);
    Rcpp::traits::input_parameter< const bool >::type index1(index1SEXP);
    rcpp_result_gen = Rcpp::wrap(copy_csr_rows_col_seq_binary(indptr, indices, rows_take, cols_take, index1));
    return rcpp_result_gen;
END_RCPP
}
// copy_csr_arbitrary_numeric
Rcpp::List copy_csr_arbitrary_numeric(Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices, Rcpp::NumericVector values, Rcpp::IntegerVector rows_take, Rcpp::IntegerVector cols_take);
RcppExport SEXP _MatrixExtra_copy_csr_arbitrary_numeric(SEXP indptrSEXP, SEXP indicesSEXP, SEXP valuesSEXP, SEXP rows_takeSEXP, SEXP cols_takeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type rows_take(rows_takeSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type cols_take(cols_takeSEXP);
    rcpp_result_gen = Rcpp::wrap(copy_csr_arbitrary_numeric(indptr, indices, values, rows_take, cols_take));
    return rcpp_result_gen;
END_RCPP
}
// copy_csr_arbitrary_logical
Rcpp::List copy_csr_arbitrary_logical(Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices, Rcpp::LogicalVector values, Rcpp::IntegerVector rows_take, Rcpp::IntegerVector cols_take);
RcppExport SEXP _MatrixExtra_copy_csr_arbitrary_logical(SEXP indptrSEXP, SEXP indicesSEXP, SEXP valuesSEXP, SEXP rows_takeSEXP, SEXP cols_takeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type rows_take(rows_takeSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type cols_take(cols_takeSEXP);
    rcpp_result_gen = Rcpp::wrap(copy_csr_arbitrary_logical(indptr, indices, values, rows_take, cols_take));
    return rcpp_result_gen;
END_RCPP
}
// copy_csr_arbitrary_binary
Rcpp::List copy_csr_arbitrary_binary(Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices, Rcpp::IntegerVector rows_take, Rcpp::IntegerVector cols_take);
RcppExport SEXP _MatrixExtra_copy_csr_arbitrary_binary(SEXP indptrSEXP, SEXP indicesSEXP, SEXP rows_takeSEXP, SEXP cols_takeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type rows_take(rows_takeSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type cols_take(cols_takeSEXP);
    rcpp_result_gen = Rcpp::wrap(copy_csr_arbitrary_binary(indptr, indices, rows_take, cols_take));
    return rcpp_result_gen;
END_RCPP
}
// repeat_indices_n_times
Rcpp::IntegerVector repeat_indices_n_times(Rcpp::IntegerVector indices, Rcpp::IntegerVector remainder, int ix_length, int desired_length);
RcppExport SEXP _MatrixExtra_repeat_indices_n_times(SEXP indicesSEXP, SEXP remainderSEXP, SEXP ix_lengthSEXP, SEXP desired_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type remainder(remainderSEXP);
    Rcpp::traits::input_parameter< int >::type ix_length(ix_lengthSEXP);
    Rcpp::traits::input_parameter< int >::type desired_length(desired_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(repeat_indices_n_times(indices, remainder, ix_length, desired_length));
    return rcpp_result_gen;
END_RCPP
}
// extract_single_val_csr_numeric
double extract_single_val_csr_numeric(Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices, Rcpp::NumericVector values, int row, int col);
RcppExport SEXP _MatrixExtra_extract_single_val_csr_numeric(SEXP indptrSEXP, SEXP indicesSEXP, SEXP valuesSEXP, SEXP rowSEXP, SEXP colSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< int >::type row(rowSEXP);
    Rcpp::traits::input_parameter< int >::type col(colSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_single_val_csr_numeric(indptr, indices, values, row, col));
    return rcpp_result_gen;
END_RCPP
}
// extract_single_val_csr_logical
int extract_single_val_csr_logical(Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices, Rcpp::LogicalVector values, int row, int col);
RcppExport SEXP _MatrixExtra_extract_single_val_csr_logical(SEXP indptrSEXP, SEXP indicesSEXP, SEXP valuesSEXP, SEXP rowSEXP, SEXP colSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< int >::type row(rowSEXP);
    Rcpp::traits::input_parameter< int >::type col(colSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_single_val_csr_logical(indptr, indices, values, row, col));
    return rcpp_result_gen;
END_RCPP
}
// extract_single_val_csr_binary
double extract_single_val_csr_binary(Rcpp::IntegerVector indptr, Rcpp::IntegerVector indices, int row, int col);
RcppExport SEXP _MatrixExtra_extract_single_val_csr_binary(SEXP indptrSEXP, SEXP indicesSEXP, SEXP rowSEXP, SEXP colSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indptr(indptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< int >::type row(rowSEXP);
    Rcpp::traits::input_parameter< int >::type col(colSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_single_val_csr_binary(indptr, indices, row, col));
    return rcpp_result_gen;
END_RCPP
}
// slice_coo_single
int slice_coo_single(Rcpp::IntegerVector ii, Rcpp::IntegerVector jj, int i, int j);
RcppExport SEXP _MatrixExtra_slice_coo_single(SEXP iiSEXP, SEXP jjSEXP, SEXP iSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type ii(iiSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type jj(jjSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(slice_coo_single(ii, jj, i, j));
    return rcpp_result_gen;
END_RCPP
}
// slice_coo_arbitrary_numeric
Rcpp::List slice_coo_arbitrary_numeric(Rcpp::IntegerVector ii, Rcpp::IntegerVector jj, Rcpp::NumericVector xx, Rcpp::IntegerVector rows_take_base1, Rcpp::IntegerVector cols_take_base1, bool all_i, bool all_j, bool i_is_seq, bool j_is_seq, bool i_is_rev_seq, bool j_is_rev_seq, int nrows, int ncols);
RcppExport SEXP _MatrixExtra_slice_coo_arbitrary_numeric(SEXP iiSEXP, SEXP jjSEXP, SEXP xxSEXP, SEXP rows_take_base1SEXP, SEXP cols_take_base1SEXP, SEXP all_iSEXP, SEXP all_jSEXP, SEXP i_is_seqSEXP, SEXP j_is_seqSEXP, SEXP i_is_rev_seqSEXP, SEXP j_is_rev_seqSEXP, SEXP nrowsSEXP, SEXP ncolsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type ii(iiSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type jj(jjSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type xx(xxSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type rows_take_base1(rows_take_base1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type cols_take_base1(cols_take_base1SEXP);
    Rcpp::traits::input_parameter< bool >::type all_i(all_iSEXP);
    Rcpp::traits::input_parameter< bool >::type all_j(all_jSEXP);
    Rcpp::traits::input_parameter< bool >::type i_is_seq(i_is_seqSEXP);
    Rcpp::traits::input_parameter< bool >::type j_is_seq(j_is_seqSEXP);
    Rcpp::traits::input_parameter< bool >::type i_is_rev_seq(i_is_rev_seqSEXP);
    Rcpp::traits::input_parameter< bool >::type j_is_rev_seq(j_is_rev_seqSEXP);
    Rcpp::traits::input_parameter< int >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< int >::type ncols(ncolsSEXP);
    rcpp_result_gen = Rcpp::wrap(slice_coo_arbitrary_numeric(ii, jj, xx, rows_take_base1, cols_take_base1, all_i, all_j, i_is_seq, j_is_seq, i_is_rev_seq, j_is_rev_seq, nrows, ncols));
    return rcpp_result_gen;
END_RCPP
}
// slice_coo_arbitrary_logical
Rcpp::List slice_coo_arbitrary_logical(Rcpp::IntegerVector ii, Rcpp::IntegerVector jj, Rcpp::LogicalVector xx, Rcpp::IntegerVector rows_take_base1, Rcpp::IntegerVector cols_take_base1, bool all_i, bool all_j, bool i_is_seq, bool j_is_seq, bool i_is_rev_seq, bool j_is_rev_seq, int nrows, int ncols);
RcppExport SEXP _MatrixExtra_slice_coo_arbitrary_logical(SEXP iiSEXP, SEXP jjSEXP, SEXP xxSEXP, SEXP rows_take_base1SEXP, SEXP cols_take_base1SEXP, SEXP all_iSEXP, SEXP all_jSEXP, SEXP i_is_seqSEXP, SEXP j_is_seqSEXP, SEXP i_is_rev_seqSEXP, SEXP j_is_rev_seqSEXP, SEXP nrowsSEXP, SEXP ncolsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type ii(iiSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type jj(jjSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type xx(xxSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type rows_take_base1(rows_take_base1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type cols_take_base1(cols_take_base1SEXP);
    Rcpp::traits::input_parameter< bool >::type all_i(all_iSEXP);
    Rcpp::traits::input_parameter< bool >::type all_j(all_jSEXP);
    Rcpp::traits::input_parameter< bool >::type i_is_seq(i_is_seqSEXP);
    Rcpp::traits::input_parameter< bool >::type j_is_seq(j_is_seqSEXP);
    Rcpp::traits::input_parameter< bool >::type i_is_rev_seq(i_is_rev_seqSEXP);
    Rcpp::traits::input_parameter< bool >::type j_is_rev_seq(j_is_rev_seqSEXP);
    Rcpp::traits::input_parameter< int >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< int >::type ncols(ncolsSEXP);
    rcpp_result_gen = Rcpp::wrap(slice_coo_arbitrary_logical(ii, jj, xx, rows_take_base1, cols_take_base1, all_i, all_j, i_is_seq, j_is_seq, i_is_rev_seq, j_is_rev_seq, nrows, ncols));
    return rcpp_result_gen;
END_RCPP
}
// slice_coo_arbitrary_binary
Rcpp::List slice_coo_arbitrary_binary(Rcpp::IntegerVector ii, Rcpp::IntegerVector jj, Rcpp::IntegerVector rows_take_base1, Rcpp::IntegerVector cols_take_base1, bool all_i, bool all_j, bool i_is_seq, bool j_is_seq, bool i_is_rev_seq, bool j_is_rev_seq, int nrows, int ncols);
RcppExport SEXP _MatrixExtra_slice_coo_arbitrary_binary(SEXP iiSEXP, SEXP jjSEXP, SEXP rows_take_base1SEXP, SEXP cols_take_base1SEXP, SEXP all_iSEXP, SEXP all_jSEXP, SEXP i_is_seqSEXP, SEXP j_is_seqSEXP, SEXP i_is_rev_seqSEXP, SEXP j_is_rev_seqSEXP, SEXP nrowsSEXP, SEXP ncolsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type ii(iiSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type jj(jjSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type rows_take_base1(rows_take_base1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type cols_take_base1(cols_take_base1SEXP);
    Rcpp::traits::input_parameter< bool >::type all_i(all_iSEXP);
    Rcpp::traits::input_parameter< bool >::type all_j(all_jSEXP);
    Rcpp::traits::input_parameter< bool >::type i_is_seq(i_is_seqSEXP);
    Rcpp::traits::input_parameter< bool >::type j_is_seq(j_is_seqSEXP);
    Rcpp::traits::input_parameter< bool >::type i_is_rev_seq(i_is_rev_seqSEXP);
    Rcpp::traits::input_parameter< bool >::type j_is_rev_seq(j_is_rev_seqSEXP);
    Rcpp::traits::input_parameter< int >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< int >::type ncols(ncolsSEXP);
    rcpp_result_gen = Rcpp::wrap(slice_coo_arbitrary_binary(ii, jj, rows_take_base1, cols_take_base1, all_i, all_j, i_is_seq, j_is_seq, i_is_rev_seq, j_is_rev_seq, nrows, ncols));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MatrixExtra_cbind_csr_numeric", (DL_FUNC) &_MatrixExtra_cbind_csr_numeric, 6},
    {"_MatrixExtra_cbind_csr_logical", (DL_FUNC) &_MatrixExtra_cbind_csr_logical, 6},
    {"_MatrixExtra_cbind_csr_binary", (DL_FUNC) &_MatrixExtra_cbind_csr_binary, 4},
    {"_MatrixExtra_matmul_dense_csc_numeric", (DL_FUNC) &_MatrixExtra_matmul_dense_csc_numeric, 5},
    {"_MatrixExtra_matmul_dense_csc_float32", (DL_FUNC) &_MatrixExtra_matmul_dense_csc_float32, 5},
    {"_MatrixExtra_tcrossprod_dense_csr_numeric", (DL_FUNC) &_MatrixExtra_tcrossprod_dense_csr_numeric, 6},
    {"_MatrixExtra_tcrossprod_dense_csr_float32", (DL_FUNC) &_MatrixExtra_tcrossprod_dense_csr_float32, 6},
    {"_MatrixExtra_tcrossprod_csr_dense_numeric", (DL_FUNC) &_MatrixExtra_tcrossprod_csr_dense_numeric, 5},
    {"_MatrixExtra_tcrossprod_csr_dense_float32", (DL_FUNC) &_MatrixExtra_tcrossprod_csr_dense_float32, 5},
    {"_MatrixExtra_matmul_csr_dvec_numeric", (DL_FUNC) &_MatrixExtra_matmul_csr_dvec_numeric, 5},
    {"_MatrixExtra_matmul_csr_dvec_integer", (DL_FUNC) &_MatrixExtra_matmul_csr_dvec_integer, 5},
    {"_MatrixExtra_matmul_csr_dvec_logical", (DL_FUNC) &_MatrixExtra_matmul_csr_dvec_logical, 5},
    {"_MatrixExtra_matmul_csr_dvec_float32", (DL_FUNC) &_MatrixExtra_matmul_csr_dvec_float32, 5},
    {"_MatrixExtra_matmul_csr_svec_numeric", (DL_FUNC) &_MatrixExtra_matmul_csr_svec_numeric, 6},
    {"_MatrixExtra_matmul_csr_svec_integer", (DL_FUNC) &_MatrixExtra_matmul_csr_svec_integer, 6},
    {"_MatrixExtra_matmul_csr_svec_logical", (DL_FUNC) &_MatrixExtra_matmul_csr_svec_logical, 6},
    {"_MatrixExtra_matmul_csr_svec_binary", (DL_FUNC) &_MatrixExtra_matmul_csr_svec_binary, 5},
    {"_MatrixExtra_matmul_csr_svec_float32", (DL_FUNC) &_MatrixExtra_matmul_csr_svec_float32, 6},
    {"_MatrixExtra_matmul_rowvec_by_csc", (DL_FUNC) &_MatrixExtra_matmul_rowvec_by_csc, 4},
    {"_MatrixExtra_matmul_rowvec_by_cscbin", (DL_FUNC) &_MatrixExtra_matmul_rowvec_by_cscbin, 3},
    {"_MatrixExtra_matmul_colvec_by_scolvecascsr_f32", (DL_FUNC) &_MatrixExtra_matmul_colvec_by_scolvecascsr_f32, 4},
    {"_MatrixExtra_matmul_colvec_by_scolvecascsr", (DL_FUNC) &_MatrixExtra_matmul_colvec_by_scolvecascsr, 4},
    {"_MatrixExtra_matmul_spcolvec_by_scolvecascsr_numeric", (DL_FUNC) &_MatrixExtra_matmul_spcolvec_by_scolvecascsr_numeric, 6},
    {"_MatrixExtra_matmul_spcolvec_by_scolvecascsr_integer", (DL_FUNC) &_MatrixExtra_matmul_spcolvec_by_scolvecascsr_integer, 6},
    {"_MatrixExtra_matmul_spcolvec_by_scolvecascsr_logical", (DL_FUNC) &_MatrixExtra_matmul_spcolvec_by_scolvecascsr_logical, 6},
    {"_MatrixExtra_matmul_spcolvec_by_scolvecascsr_binary", (DL_FUNC) &_MatrixExtra_matmul_spcolvec_by_scolvecascsr_binary, 5},
    {"_MatrixExtra_is_same_ngRMatrix", (DL_FUNC) &_MatrixExtra_is_same_ngRMatrix, 4},
    {"_MatrixExtra_check_indices_are_unsorted", (DL_FUNC) &_MatrixExtra_check_indices_are_unsorted, 2},
    {"_MatrixExtra_sort_sparse_indices_numeric", (DL_FUNC) &_MatrixExtra_sort_sparse_indices_numeric, 3},
    {"_MatrixExtra_sort_sparse_indices_logical", (DL_FUNC) &_MatrixExtra_sort_sparse_indices_logical, 3},
    {"_MatrixExtra_sort_sparse_indices_numeric_known_ncol", (DL_FUNC) &_MatrixExtra_sort_sparse_indices_numeric_known_ncol, 4},
    {"_MatrixExtra_sort_sparse_indices_logical_known_ncol", (DL_FUNC) &_MatrixExtra_sort_sparse_indices_logical_known_ncol, 4},
    {"_MatrixExtra_sort_sparse_indices_binary", (DL_FUNC) &_MatrixExtra_sort_sparse_indices_binary, 2},
    {"_MatrixExtra_sort_coo_indices_numeric", (DL_FUNC) &_MatrixExtra_sort_coo_indices_numeric, 3},
    {"_MatrixExtra_sort_coo_indices_logical", (DL_FUNC) &_MatrixExtra_sort_coo_indices_logical, 3},
    {"_MatrixExtra_sort_coo_indices_binary", (DL_FUNC) &_MatrixExtra_sort_coo_indices_binary, 2},
    {"_MatrixExtra_sort_vector_indices_numeric", (DL_FUNC) &_MatrixExtra_sort_vector_indices_numeric, 2},
    {"_MatrixExtra_sort_vector_indices_integer", (DL_FUNC) &_MatrixExtra_sort_vector_indices_integer, 2},
    {"_MatrixExtra_sort_vector_indices_logical", (DL_FUNC) &_MatrixExtra_sort_vector_indices_logical, 2},
    {"_MatrixExtra_sort_vector_indices_binary", (DL_FUNC) &_MatrixExtra_sort_vector_indices_binary, 1},
    {"_MatrixExtra_deepcopy_num", (DL_FUNC) &_MatrixExtra_deepcopy_num, 1},
    {"_MatrixExtra_deepcopy_int", (DL_FUNC) &_MatrixExtra_deepcopy_int, 1},
    {"_MatrixExtra_deepcopy_log", (DL_FUNC) &_MatrixExtra_deepcopy_log, 1},
    {"_MatrixExtra_deepcopy_str", (DL_FUNC) &_MatrixExtra_deepcopy_str, 1},
    {"_MatrixExtra_multiply_csr_elemwise", (DL_FUNC) &_MatrixExtra_multiply_csr_elemwise, 6},
    {"_MatrixExtra_multiply_csr_by_dense_elemwise_double", (DL_FUNC) &_MatrixExtra_multiply_csr_by_dense_elemwise_double, 4},
    {"_MatrixExtra_multiply_csr_by_dense_elemwise_int", (DL_FUNC) &_MatrixExtra_multiply_csr_by_dense_elemwise_int, 4},
    {"_MatrixExtra_multiply_csr_by_dense_elemwise_bool", (DL_FUNC) &_MatrixExtra_multiply_csr_by_dense_elemwise_bool, 4},
    {"_MatrixExtra_add_csr_elemwise", (DL_FUNC) &_MatrixExtra_add_csr_elemwise, 7},
    {"_MatrixExtra_multiply_csr_by_coo_elemwise", (DL_FUNC) &_MatrixExtra_multiply_csr_by_coo_elemwise, 8},
    {"_MatrixExtra_multiply_coo_by_dense_numeric", (DL_FUNC) &_MatrixExtra_multiply_coo_by_dense_numeric, 4},
    {"_MatrixExtra_multiply_coo_by_dense_integer", (DL_FUNC) &_MatrixExtra_multiply_coo_by_dense_integer, 4},
    {"_MatrixExtra_multiply_coo_by_dense_logical", (DL_FUNC) &_MatrixExtra_multiply_coo_by_dense_logical, 4},
    {"_MatrixExtra_multiply_coo_by_dense_float32", (DL_FUNC) &_MatrixExtra_multiply_coo_by_dense_float32, 4},
    {"_MatrixExtra_concat_indptr2", (DL_FUNC) &_MatrixExtra_concat_indptr2, 2},
    {"_MatrixExtra_concat_csr_batch", (DL_FUNC) &_MatrixExtra_concat_csr_batch, 2},
    {"_MatrixExtra_check_is_seq", (DL_FUNC) &_MatrixExtra_check_is_seq, 1},
    {"_MatrixExtra_check_is_rev_seq", (DL_FUNC) &_MatrixExtra_check_is_rev_seq, 1},
    {"_MatrixExtra_reverse_rows_numeric", (DL_FUNC) &_MatrixExtra_reverse_rows_numeric, 3},
    {"_MatrixExtra_reverse_rows_logical", (DL_FUNC) &_MatrixExtra_reverse_rows_logical, 3},
    {"_MatrixExtra_reverse_rows_binary", (DL_FUNC) &_MatrixExtra_reverse_rows_binary, 2},
    {"_MatrixExtra_reverse_columns_inplace_numeric", (DL_FUNC) &_MatrixExtra_reverse_columns_inplace_numeric, 4},
    {"_MatrixExtra_reverse_columns_inplace_logical", (DL_FUNC) &_MatrixExtra_reverse_columns_inplace_logical, 4},
    {"_MatrixExtra_reverse_columns_inplace_binary", (DL_FUNC) &_MatrixExtra_reverse_columns_inplace_binary, 4},
    {"_MatrixExtra_copy_csr_rows_numeric", (DL_FUNC) &_MatrixExtra_copy_csr_rows_numeric, 4},
    {"_MatrixExtra_copy_csr_rows_logical", (DL_FUNC) &_MatrixExtra_copy_csr_rows_logical, 4},
    {"_MatrixExtra_copy_csr_rows_binary", (DL_FUNC) &_MatrixExtra_copy_csr_rows_binary, 3},
    {"_MatrixExtra_copy_csr_rows_col_seq_numeric", (DL_FUNC) &_MatrixExtra_copy_csr_rows_col_seq_numeric, 6},
    {"_MatrixExtra_copy_csr_rows_col_seq_logical", (DL_FUNC) &_MatrixExtra_copy_csr_rows_col_seq_logical, 6},
    {"_MatrixExtra_copy_csr_rows_col_seq_binary", (DL_FUNC) &_MatrixExtra_copy_csr_rows_col_seq_binary, 5},
    {"_MatrixExtra_copy_csr_arbitrary_numeric", (DL_FUNC) &_MatrixExtra_copy_csr_arbitrary_numeric, 5},
    {"_MatrixExtra_copy_csr_arbitrary_logical", (DL_FUNC) &_MatrixExtra_copy_csr_arbitrary_logical, 5},
    {"_MatrixExtra_copy_csr_arbitrary_binary", (DL_FUNC) &_MatrixExtra_copy_csr_arbitrary_binary, 4},
    {"_MatrixExtra_repeat_indices_n_times", (DL_FUNC) &_MatrixExtra_repeat_indices_n_times, 4},
    {"_MatrixExtra_extract_single_val_csr_numeric", (DL_FUNC) &_MatrixExtra_extract_single_val_csr_numeric, 5},
    {"_MatrixExtra_extract_single_val_csr_logical", (DL_FUNC) &_MatrixExtra_extract_single_val_csr_logical, 5},
    {"_MatrixExtra_extract_single_val_csr_binary", (DL_FUNC) &_MatrixExtra_extract_single_val_csr_binary, 4},
    {"_MatrixExtra_slice_coo_single", (DL_FUNC) &_MatrixExtra_slice_coo_single, 4},
    {"_MatrixExtra_slice_coo_arbitrary_numeric", (DL_FUNC) &_MatrixExtra_slice_coo_arbitrary_numeric, 13},
    {"_MatrixExtra_slice_coo_arbitrary_logical", (DL_FUNC) &_MatrixExtra_slice_coo_arbitrary_logical, 13},
    {"_MatrixExtra_slice_coo_arbitrary_binary", (DL_FUNC) &_MatrixExtra_slice_coo_arbitrary_binary, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_MatrixExtra(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
